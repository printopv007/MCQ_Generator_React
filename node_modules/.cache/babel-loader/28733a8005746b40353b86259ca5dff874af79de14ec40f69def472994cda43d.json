{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport axios from 'axios';\nconst CollectData = url => {\n  _s();\n  useEffect(() => {\n    console.log(\"Mounting or Re-rendering...\");\n    const fetchDataFromApi = async () => {\n      try {\n        setFetching(true); // Update isFetching state to true\n\n        const response = await axios.get(apiUrl);\n        setDataState({\n          data: response.data\n        }); // Update dataState with the response data\n\n        setFetching(false); // Set isFetching back to false when done fetching\n      } catch (e) {\n        console.log(e);\n        setFetching(false); // Make sure to set isFetching to false in case of an error\n      }\n    };\n\n    fetchDataFromApi();\n  }, [apiUrl]); // Include apiUrl in the dependency array to re-fetch when it changes\n\n  return [dataState, isFetching]; // Return isFetching state as well for better control\n};\n_s(CollectData, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = CollectData;\nexport default CollectData;\nvar _c;\n$RefreshReg$(_c, \"CollectData\");","map":{"version":3,"names":["useEffect","useState","axios","CollectData","url","_s","console","log","fetchDataFromApi","setFetching","response","get","apiUrl","setDataState","data","e","dataState","isFetching","_c","$RefreshReg$"],"sources":["D:/MCQ Generator_Frontend/core/src/api/ConnectAPI.js"],"sourcesContent":["import  { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst CollectData = (url) => {\r\n   \r\n    useEffect(() => {\r\n        console.log(\"Mounting or Re-rendering...\");\r\n        const fetchDataFromApi = async () => {\r\n            try {\r\n                setFetching(true); // Update isFetching state to true\r\n\r\n                const response = await axios.get(apiUrl);\r\n\r\n                setDataState({ data: response.data }); // Update dataState with the response data\r\n                \r\n                setFetching(false); // Set isFetching back to false when done fetching\r\n            } catch (e) {\r\n                console.log(e);\r\n                setFetching(false); // Make sure to set isFetching to false in case of an error\r\n            }\r\n        };\r\n\r\n        fetchDataFromApi();\r\n    }, [apiUrl]); // Include apiUrl in the dependency array to re-fetch when it changes\r\n\r\n    return [dataState, isFetching]; // Return isFetching state as well for better control\r\n};\r\n\r\nexport default CollectData;\r\n"],"mappings":";AAAA,SAAUA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC5C,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,WAAW,GAAIC,GAAG,IAAK;EAAAC,EAAA;EAEzBL,SAAS,CAAC,MAAM;IACZM,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;IAC1C,MAAMC,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI;QACAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;;QAEnB,MAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAG,CAACC,MAAM,CAAC;QAExCC,YAAY,CAAC;UAAEC,IAAI,EAAEJ,QAAQ,CAACI;QAAK,CAAC,CAAC,CAAC,CAAC;;QAEvCL,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;MACxB,CAAC,CAAC,OAAOM,CAAC,EAAE;QACRT,OAAO,CAACC,GAAG,CAACQ,CAAC,CAAC;QACdN,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;MACxB;IACJ,CAAC;;IAEDD,gBAAgB,CAAC,CAAC;EACtB,CAAC,EAAE,CAACI,MAAM,CAAC,CAAC,CAAC,CAAC;;EAEd,OAAO,CAACI,SAAS,EAAEC,UAAU,CAAC,CAAC,CAAC;AACpC,CAAC;AAACZ,EAAA,CAvBIF,WAAW;AAAAe,EAAA,GAAXf,WAAW;AAyBjB,eAAeA,WAAW;AAAC,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}