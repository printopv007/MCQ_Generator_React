{"ast":null,"code":"// import React, { useEffect, useState } from \"react\";\n// import { fetchData } from \"../api\";\n// import Container from \"react-bootstrap/Container\";\n// import Button from \"react-bootstrap/Button\";\n\n// export const Random = () => {\n//   const [data, setData] = useState([]);\n//   const [userAnswers, setUserAnswers] = useState([]);\n//   const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n//   const [answerSelected, setAnswerSelected] = useState(false);\n//   const [score, setScore] = useState(0); // Track the user's score\n//   const [showScoreAlert, setShowScoreAlert] = useState(false); // Control when to show the score alert\n//   const [showSubmitButton, setShowSubmitButton] = useState(false); // Control when to show the \"Submit\" button\n\n//   useEffect(() => {\n//     getData();\n//   }, []);\n\n//   useEffect(() => {\n//     if (answerSelected && currentQuestionIndex === data.length - 1) {\n//       // Calculate the score when all questions have been answered\n//       const newScore = userAnswers.reduce((totalScore, answerIndex, questionIndex) => {\n//         const isCorrect = data[questionIndex].answer[answerIndex].is_right;\n//         return isCorrect ? totalScore + 1 : totalScore;\n//       }, 0);\n//       setScore(newScore);\n//       setShowScoreAlert(true);\n//       setShowSubmitButton(false); // Hide the \"Submit\" button after showing the score\n//     }\n//   }, [userAnswers, currentQuestionIndex, answerSelected, data, score]);\n\n//   const getData = async () => {\n//     const response = await fetchData('mcq/q/django');\n//     const shuffledData = shuffleArray(response);\n//     setData(shuffledData);\n//   };\n\n//   const shuffleArray = (array) => {\n//     let shuffledArray = array.slice();\n//     for (let i = shuffledArray.length - 1; i > 0; i--) {\n//       const j = Math.floor(Math.random() * (i + 1));\n//       [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];\n//     }\n//     return shuffledArray;\n//   };\n\n//   const handleAnswerClick = (questionIndex, answerIndex) => {\n//     if (!answerSelected) {\n//       const newAnswers = [...userAnswers];\n//       newAnswers[questionIndex] = answerIndex;\n//       setUserAnswers(newAnswers);\n//       setAnswerSelected(true);\n\n//       if (questionIndex === data.length - 1) {\n//         // Show the \"Submit\" button when the last question is answered\n//         setShowSubmitButton(true);\n//       }\n//     }\n//   };\n\n//   const handleNextClick = () => {\n//     if (currentQuestionIndex < data.length - 1) {\n//       setCurrentQuestionIndex(currentQuestionIndex + 1);\n//       setAnswerSelected(false);\n//     }\n//   };\n\n//   const handleScoreSubmit = () => {\n//     // Calculate the score when the user chooses to submit\n//     const newScore = userAnswers.reduce((totalScore, answerIndex, questionIndex) => {\n//       const isCorrect = data[questionIndex].answer[answerIndex].is_right;\n//       return isCorrect ? totalScore + 1 : totalScore;\n//     }, 0);\n//     setScore(newScore);\n//     setShowScoreAlert(true);\n//     setShowSubmitButton(false);\n//   };\n\n//   return (\n//     <Container>\n//       {data.length > 0 && currentQuestionIndex < data.length && (\n//         <div>\n//           <h3>\n//             <label htmlFor=\"\">{currentQuestionIndex + 1}) {data[currentQuestionIndex].title}</label>\n//           </h3>\n//           <ul className=\"answer-list\">\n//             {data[currentQuestionIndex].answer.map((answer, answerIndex) => (\n//               <div key={answer.id}>\n//                 <form action=\"\">\n//                   <br />\n//                   <div className=\"main\">\n//                     <Button\n//                       variant={\n//                         answerSelected &&\n//                         (answer.is_right || userAnswers[currentQuestionIndex] === answerIndex)\n//                           ? answer.is_right\n//                             ? \"success\"\n//                             : \"danger\"\n//                           : \"primary\"\n//                       }\n//                       onClick={() => handleAnswerClick(currentQuestionIndex, answerIndex)}\n//                       disabled={answerSelected || showScoreAlert}\n//                       className={answerSelected ? \"disabled-answer\" : \"\"}\n//                     >\n//                       {answerIndex + 1}) {answer.answer_text}\n//                       {answer.is_right ? \" (Correct)\" : \"\"}\n//                     </Button>\n//                   </div>\n//                 </form>\n//               </div>\n//             ))}\n//           </ul>\n//           {answerSelected && currentQuestionIndex < data.length - 1 && (\n//             <Button onClick={handleNextClick} variant=\"primary\">\n//               Next\n//             </Button>\n//           )}\n//           {showSubmitButton && (\n//             <Button onClick={handleScoreSubmit} variant=\"warning\">\n//               Submit\n//             </Button>\n//           )}\n//         </div>\n//       )}\n//       {showScoreAlert && (\n//         <div>\n//           <h3>Your Final Score: {score} out of {data.length}</h3>\n//         </div>\n//       )}\n//     </Container>\n//   );\n// };\n\n// export default Random;\n\n// import React, { useEffect, useState } from \"react\";\n// import { fetchData } from \"../api\";\n// import Container from \"react-bootstrap/Container\";\n// import Button from \"react-bootstrap/Button\";\n\n// export const Random = () => {\n//   const [data, setData] = useState([]);\n//   const [userAnswers, setUserAnswers] = useState([]);\n//   const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n//   const [answerSelected, setAnswerSelected] = useState(false);\n//   const [score, setScore] = useState(0); // Track the user's score\n//   const [showScore, setShowScore] = useState(false); // Control when to show the score\n//   const [showSubmit, setShowSubmit] = useState(false); // Control when to show the \"Submit\" button\n\n//   useEffect(() => {\n//     getData();\n//   }, []);\n\n//   useEffect(() => {\n//     if (answerSelected && currentQuestionIndex === data.length - 1) {\n//       // Calculate the score when all questions have been answered\n//       const newScore = userAnswers.reduce((totalScore, answerIndex, questionIndex) => {\n//         const isCorrect = data[questionIndex].answer[answerIndex].is_right;\n//         return isCorrect ? totalScore + 1 : totalScore;\n//       }, 0);\n//       setScore(newScore);\n//       setShowScore(true);\n//     }\n//   }, [userAnswers, currentQuestionIndex, answerSelected, data]);\n\n//   const getData = async () => {\n//     const response = await fetchData('mcq/q/django');\n//     const shuffledData = shuffleArray(response);\n//     setData(shuffledData);\n//   };\n\n//   const shuffleArray = (array) => {\n//     let shuffledArray = array.slice();\n//     for (let i = shuffledArray.length - 1; i > 0; i--) {\n//       const j = Math.floor(Math.random() * (i + 1));\n//       [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];\n//     }\n//     return shuffledArray;\n//   };\n\n//   const handleAnswerClick = (questionIndex, answerIndex) => {\n//     if (!answerSelected) {\n//       const newAnswers = [...userAnswers];\n//       newAnswers[questionIndex] = answerIndex;\n//       setUserAnswers(newAnswers);\n//       setAnswerSelected(true);\n//     }\n//   };\n\n//   const handleNextClick = () => {\n//     if (currentQuestionIndex < data.length - 1) {\n//       setCurrentQuestionIndex(currentQuestionIndex + 1);\n//       setAnswerSelected(false);\n//     }\n//   };\n\n//   return (\n//     <Container>\n//       {data.length > 0 && currentQuestionIndex < data.length && (\n//         <div>\n//           <h3>\n//             <label htmlFor=\"\">{currentQuestionIndex + 1}) {data[currentQuestionIndex].title}</label>\n//           </h3>\n//           <ul className=\"answer-list\">\n//             {data[currentQuestionIndex].answer.map((answer, answerIndex) => (\n//               <div key={answer.id}>\n//                 <form action=\"\">\n//                   <br />\n//                   <div className=\"main\">\n//                     <Button\n//                       variant={\n//                         answerSelected &&\n//                         (answer.is_right || userAnswers[currentQuestionIndex] === answerIndex)\n//                           ? answer.is_right\n//                             ? \"success\"\n//                             : \"danger\"\n//                           : \"primary\"\n//                       }\n//                       onClick={() => handleAnswerClick(currentQuestionIndex, answerIndex)}\n//                       disabled={answerSelected}\n//                       className={answerSelected ? \"disabled-answer\" : \"\"}\n//                     >\n//                       {answerIndex + 1}) {answer.answer_text}\n//                       {answer.is_right ? \" (Correct)\" : \"\"}\n//                     </Button>\n//                   </div>\n//                 </form>\n//               </div>\n//             ))}\n//           </ul>\n//           {answerSelected && currentQuestionIndex < data.length - 1 && (\n//             <Button onClick={handleNextClick} variant=\"primary\">\n//               Next\n//             </Button>\n//           )}\n//         </div>\n//       )}\n//       {showScore && (\n//         <div>\n//           <h3>Your Final Score: {score} out of {data.length}</h3>\n//         </div>\n//       )}\n//       {currentQuestionIndex === data.length - 1 && !showSubmit && (\n//         <Button onClick={() => setShowSubmit(true)} variant=\"warning\">\n//           Submit\n//         </Button>\n//       )}\n//     </Container>\n//   );\n// };\n\n// export default Random;","map":{"version":3,"names":[],"sources":["D:/MCQ Generator_Frontend/core/src/components/Random.jsx"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\r\n// import { fetchData } from \"../api\";\r\n// import Container from \"react-bootstrap/Container\";\r\n// import Button from \"react-bootstrap/Button\";\r\n\r\n// export const Random = () => {\r\n//   const [data, setData] = useState([]);\r\n//   const [userAnswers, setUserAnswers] = useState([]);\r\n//   const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n//   const [answerSelected, setAnswerSelected] = useState(false);\r\n//   const [score, setScore] = useState(0); // Track the user's score\r\n//   const [showScoreAlert, setShowScoreAlert] = useState(false); // Control when to show the score alert\r\n//   const [showSubmitButton, setShowSubmitButton] = useState(false); // Control when to show the \"Submit\" button\r\n\r\n//   useEffect(() => {\r\n//     getData();\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     if (answerSelected && currentQuestionIndex === data.length - 1) {\r\n//       // Calculate the score when all questions have been answered\r\n//       const newScore = userAnswers.reduce((totalScore, answerIndex, questionIndex) => {\r\n//         const isCorrect = data[questionIndex].answer[answerIndex].is_right;\r\n//         return isCorrect ? totalScore + 1 : totalScore;\r\n//       }, 0);\r\n//       setScore(newScore);\r\n//       setShowScoreAlert(true);\r\n//       setShowSubmitButton(false); // Hide the \"Submit\" button after showing the score\r\n//     }\r\n//   }, [userAnswers, currentQuestionIndex, answerSelected, data, score]);\r\n\r\n//   const getData = async () => {\r\n//     const response = await fetchData('mcq/q/django');\r\n//     const shuffledData = shuffleArray(response);\r\n//     setData(shuffledData);\r\n//   };\r\n\r\n//   const shuffleArray = (array) => {\r\n//     let shuffledArray = array.slice();\r\n//     for (let i = shuffledArray.length - 1; i > 0; i--) {\r\n//       const j = Math.floor(Math.random() * (i + 1));\r\n//       [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];\r\n//     }\r\n//     return shuffledArray;\r\n//   };\r\n\r\n//   const handleAnswerClick = (questionIndex, answerIndex) => {\r\n//     if (!answerSelected) {\r\n//       const newAnswers = [...userAnswers];\r\n//       newAnswers[questionIndex] = answerIndex;\r\n//       setUserAnswers(newAnswers);\r\n//       setAnswerSelected(true);\r\n\r\n//       if (questionIndex === data.length - 1) {\r\n//         // Show the \"Submit\" button when the last question is answered\r\n//         setShowSubmitButton(true);\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   const handleNextClick = () => {\r\n//     if (currentQuestionIndex < data.length - 1) {\r\n//       setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n//       setAnswerSelected(false);\r\n//     }\r\n//   };\r\n\r\n//   const handleScoreSubmit = () => {\r\n//     // Calculate the score when the user chooses to submit\r\n//     const newScore = userAnswers.reduce((totalScore, answerIndex, questionIndex) => {\r\n//       const isCorrect = data[questionIndex].answer[answerIndex].is_right;\r\n//       return isCorrect ? totalScore + 1 : totalScore;\r\n//     }, 0);\r\n//     setScore(newScore);\r\n//     setShowScoreAlert(true);\r\n//     setShowSubmitButton(false);\r\n//   };\r\n\r\n//   return (\r\n//     <Container>\r\n//       {data.length > 0 && currentQuestionIndex < data.length && (\r\n//         <div>\r\n//           <h3>\r\n//             <label htmlFor=\"\">{currentQuestionIndex + 1}) {data[currentQuestionIndex].title}</label>\r\n//           </h3>\r\n//           <ul className=\"answer-list\">\r\n//             {data[currentQuestionIndex].answer.map((answer, answerIndex) => (\r\n//               <div key={answer.id}>\r\n//                 <form action=\"\">\r\n//                   <br />\r\n//                   <div className=\"main\">\r\n//                     <Button\r\n//                       variant={\r\n//                         answerSelected &&\r\n//                         (answer.is_right || userAnswers[currentQuestionIndex] === answerIndex)\r\n//                           ? answer.is_right\r\n//                             ? \"success\"\r\n//                             : \"danger\"\r\n//                           : \"primary\"\r\n//                       }\r\n//                       onClick={() => handleAnswerClick(currentQuestionIndex, answerIndex)}\r\n//                       disabled={answerSelected || showScoreAlert}\r\n//                       className={answerSelected ? \"disabled-answer\" : \"\"}\r\n//                     >\r\n//                       {answerIndex + 1}) {answer.answer_text}\r\n//                       {answer.is_right ? \" (Correct)\" : \"\"}\r\n//                     </Button>\r\n//                   </div>\r\n//                 </form>\r\n//               </div>\r\n//             ))}\r\n//           </ul>\r\n//           {answerSelected && currentQuestionIndex < data.length - 1 && (\r\n//             <Button onClick={handleNextClick} variant=\"primary\">\r\n//               Next\r\n//             </Button>\r\n//           )}\r\n//           {showSubmitButton && (\r\n//             <Button onClick={handleScoreSubmit} variant=\"warning\">\r\n//               Submit\r\n//             </Button>\r\n//           )}\r\n//         </div>\r\n//       )}\r\n//       {showScoreAlert && (\r\n//         <div>\r\n//           <h3>Your Final Score: {score} out of {data.length}</h3>\r\n//         </div>\r\n//       )}\r\n//     </Container>\r\n//   );\r\n// };\r\n\r\n// export default Random;\r\n\r\n\r\n\r\n// import React, { useEffect, useState } from \"react\";\r\n// import { fetchData } from \"../api\";\r\n// import Container from \"react-bootstrap/Container\";\r\n// import Button from \"react-bootstrap/Button\";\r\n\r\n// export const Random = () => {\r\n//   const [data, setData] = useState([]);\r\n//   const [userAnswers, setUserAnswers] = useState([]);\r\n//   const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n//   const [answerSelected, setAnswerSelected] = useState(false);\r\n//   const [score, setScore] = useState(0); // Track the user's score\r\n//   const [showScore, setShowScore] = useState(false); // Control when to show the score\r\n//   const [showSubmit, setShowSubmit] = useState(false); // Control when to show the \"Submit\" button\r\n\r\n//   useEffect(() => {\r\n//     getData();\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     if (answerSelected && currentQuestionIndex === data.length - 1) {\r\n//       // Calculate the score when all questions have been answered\r\n//       const newScore = userAnswers.reduce((totalScore, answerIndex, questionIndex) => {\r\n//         const isCorrect = data[questionIndex].answer[answerIndex].is_right;\r\n//         return isCorrect ? totalScore + 1 : totalScore;\r\n//       }, 0);\r\n//       setScore(newScore);\r\n//       setShowScore(true);\r\n//     }\r\n//   }, [userAnswers, currentQuestionIndex, answerSelected, data]);\r\n\r\n//   const getData = async () => {\r\n//     const response = await fetchData('mcq/q/django');\r\n//     const shuffledData = shuffleArray(response);\r\n//     setData(shuffledData);\r\n//   };\r\n\r\n//   const shuffleArray = (array) => {\r\n//     let shuffledArray = array.slice();\r\n//     for (let i = shuffledArray.length - 1; i > 0; i--) {\r\n//       const j = Math.floor(Math.random() * (i + 1));\r\n//       [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];\r\n//     }\r\n//     return shuffledArray;\r\n//   };\r\n\r\n//   const handleAnswerClick = (questionIndex, answerIndex) => {\r\n//     if (!answerSelected) {\r\n//       const newAnswers = [...userAnswers];\r\n//       newAnswers[questionIndex] = answerIndex;\r\n//       setUserAnswers(newAnswers);\r\n//       setAnswerSelected(true);\r\n//     }\r\n//   };\r\n\r\n//   const handleNextClick = () => {\r\n//     if (currentQuestionIndex < data.length - 1) {\r\n//       setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n//       setAnswerSelected(false);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <Container>\r\n//       {data.length > 0 && currentQuestionIndex < data.length && (\r\n//         <div>\r\n//           <h3>\r\n//             <label htmlFor=\"\">{currentQuestionIndex + 1}) {data[currentQuestionIndex].title}</label>\r\n//           </h3>\r\n//           <ul className=\"answer-list\">\r\n//             {data[currentQuestionIndex].answer.map((answer, answerIndex) => (\r\n//               <div key={answer.id}>\r\n//                 <form action=\"\">\r\n//                   <br />\r\n//                   <div className=\"main\">\r\n//                     <Button\r\n//                       variant={\r\n//                         answerSelected &&\r\n//                         (answer.is_right || userAnswers[currentQuestionIndex] === answerIndex)\r\n//                           ? answer.is_right\r\n//                             ? \"success\"\r\n//                             : \"danger\"\r\n//                           : \"primary\"\r\n//                       }\r\n//                       onClick={() => handleAnswerClick(currentQuestionIndex, answerIndex)}\r\n//                       disabled={answerSelected}\r\n//                       className={answerSelected ? \"disabled-answer\" : \"\"}\r\n//                     >\r\n//                       {answerIndex + 1}) {answer.answer_text}\r\n//                       {answer.is_right ? \" (Correct)\" : \"\"}\r\n//                     </Button>\r\n//                   </div>\r\n//                 </form>\r\n//               </div>\r\n//             ))}\r\n//           </ul>\r\n//           {answerSelected && currentQuestionIndex < data.length - 1 && (\r\n//             <Button onClick={handleNextClick} variant=\"primary\">\r\n//               Next\r\n//             </Button>\r\n//           )}\r\n//         </div>\r\n//       )}\r\n//       {showScore && (\r\n//         <div>\r\n//           <h3>Your Final Score: {score} out of {data.length}</h3>\r\n//         </div>\r\n//       )}\r\n//       {currentQuestionIndex === data.length - 1 && !showSubmit && (\r\n//         <Button onClick={() => setShowSubmit(true)} variant=\"warning\">\r\n//           Submit\r\n//         </Button>\r\n//       )}\r\n//     </Container>\r\n//   );\r\n// };\r\n\r\n// export default Random;\r\n\r\n\r\n"],"mappings},"metadata":{},"sourceType":"module","externalDependencies":[]}