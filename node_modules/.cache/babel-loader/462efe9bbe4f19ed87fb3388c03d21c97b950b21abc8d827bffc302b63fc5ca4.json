{"ast":null,"code":"var _s2 = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport axios from 'axios';\nconst CollectData = url => {\n  _s2();\n  var _s = $RefreshSig$();\n  _s(useEffect(_s(() => {\n    _s();\n    const [isFetching, setFetching] = useState(false);\n    const [dataState, setDataState] = useState({\n      data: []\n    });\n    const apiUrl = url; // No need to use useState for the API URL\n\n    console.log(\"Mounting or Re-rendering...\");\n    const fetchDataFromApi = async () => {\n      try {\n        setFetching(true); // Update isFetching state to true\n\n        const response = await axios.get(apiUrl);\n        setDataState({\n          data: response.data\n        }); // Update dataState with the response data\n\n        setFetching(false); // Set isFetching back to false when done fetching\n      } catch (e) {\n        console.log(e);\n        setFetching(false); // Make sure to set isFetching to false in case of an error\n      }\n    };\n\n    fetchDataFromApi();\n  }, \"jJst0fwSVhGHdHkJhYuF8xv4Xjw=\"), [apiUrl]), \"jJst0fwSVhGHdHkJhYuF8xv4Xjw=\"); // Include apiUrl in the dependency array to re-fetch when it changes\n\n  return [dataState, isFetching]; // Return isFetching state as well for better control\n};\n_s2(CollectData, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = CollectData;\nexport default CollectData;\nvar _c;\n$RefreshReg$(_c, \"CollectData\");","map":{"version":3,"names":["useEffect","useState","axios","CollectData","url","_s2","_s","$RefreshSig$","isFetching","setFetching","dataState","setDataState","data","apiUrl","console","log","fetchDataFromApi","response","get","e","_c","$RefreshReg$"],"sources":["D:/MCQ Generator_Frontend/core/src/api/ConnectAPI.js"],"sourcesContent":["import  { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst CollectData = (url) => {\r\n   \r\n    useEffect(() => {\r\n         const [isFetching, setFetching] = useState(false);\r\n    const [dataState, setDataState] = useState({ data: [] });\r\n    const apiUrl = url; // No need to use useState for the API URL\r\n\r\n        console.log(\"Mounting or Re-rendering...\");\r\n        const fetchDataFromApi = async () => {\r\n            try {\r\n                setFetching(true); // Update isFetching state to true\r\n\r\n                const response = await axios.get(apiUrl);\r\n\r\n                setDataState({ data: response.data }); // Update dataState with the response data\r\n                \r\n                setFetching(false); // Set isFetching back to false when done fetching\r\n            } catch (e) {\r\n                console.log(e);\r\n                setFetching(false); // Make sure to set isFetching to false in case of an error\r\n            }\r\n        };\r\n\r\n        fetchDataFromApi();\r\n    }, [apiUrl]); // Include apiUrl in the dependency array to re-fetch when it changes\r\n\r\n    return [dataState, isFetching]; // Return isFetching state as well for better control\r\n};\r\n\r\nexport default CollectData;\r\n"],"mappings":";AAAA,SAAUA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC5C,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,WAAW,GAAIC,GAAG,IAAK;EAAAC,GAAA;EAAA,IAAAC,EAAA,GAAAC,YAAA;EAEzBD,EAAA,CAAAN,SAAS,CAAAM,EAAA,CAAC,MAAM;IAAAA,EAAA;IACX,MAAM,CAACE,UAAU,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;IACtD,MAAM,CAACS,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC;MAAEW,IAAI,EAAE;IAAG,CAAC,CAAC;IACxD,MAAMC,MAAM,GAAGT,GAAG,CAAC,CAAC;;IAEhBU,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;IAC1C,MAAMC,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI;QACAP,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;;QAEnB,MAAMQ,QAAQ,GAAG,MAAMf,KAAK,CAACgB,GAAG,CAACL,MAAM,CAAC;QAExCF,YAAY,CAAC;UAAEC,IAAI,EAAEK,QAAQ,CAACL;QAAK,CAAC,CAAC,CAAC,CAAC;;QAEvCH,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;MACxB,CAAC,CAAC,OAAOU,CAAC,EAAE;QACRL,OAAO,CAACC,GAAG,CAACI,CAAC,CAAC;QACdV,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;MACxB;IACJ,CAAC;;IAEDO,gBAAgB,CAAC,CAAC;EACtB,CAAC,mCAAE,CAACH,MAAM,CAAC,CAAC,kCAAC,CAAC;;EAEd,OAAO,CAACH,SAAS,EAAEF,UAAU,CAAC,CAAC,CAAC;AACpC,CAAC;AAACH,GAAA,CA3BIF,WAAW;AAAAiB,EAAA,GAAXjB,WAAW;AA6BjB,eAAeA,WAAW;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}