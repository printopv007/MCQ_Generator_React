{"ast":null,"code":"var _jsxFileName = \"D:\\\\MCQ Generator_Frontend\\\\core\\\\src\\\\components\\\\Random.jsx\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n// import { fetchData } from \"../api\";\n// import Container from \"react-bootstrap/Container\";\n// import Button from \"react-bootstrap/Button\";\n\n// export const Random = () => {\n//   const [data, setData] = useState([]);\n//   const [userAnswers, setUserAnswers] = useState([]);\n//   const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n//   const [answerSelected, setAnswerSelected] = useState(false);\n//   const [score, setScore] = useState(0); // Track the user's score\n//   const [showScoreAlert, setShowScoreAlert] = useState(false); // Control when to show the score alert\n//   const [showSubmitButton, setShowSubmitButton] = useState(false); // Control when to show the \"Submit\" button\n\n//   useEffect(() => {\n//     getData();\n//   }, []);\n\n//   useEffect(() => {\n//     if (answerSelected && currentQuestionIndex === data.length - 1) {\n//       // Calculate the score when all questions have been answered\n//       const newScore = userAnswers.reduce((totalScore, answerIndex, questionIndex) => {\n//         const isCorrect = data[questionIndex].answer[answerIndex].is_right;\n//         return isCorrect ? totalScore + 1 : totalScore;\n//       }, 0);\n//       setScore(newScore);\n//       setShowScoreAlert(true);\n//       setShowSubmitButton(false); // Hide the \"Submit\" button after showing the score\n//     }\n//   }, [userAnswers, currentQuestionIndex, answerSelected, data, score]);\n\n//   const getData = async () => {\n//     const response = await fetchData('mcq/q/django');\n//     const shuffledData = shuffleArray(response);\n//     setData(shuffledData);\n//   };\n\n//   const shuffleArray = (array) => {\n//     let shuffledArray = array.slice();\n//     for (let i = shuffledArray.length - 1; i > 0; i--) {\n//       const j = Math.floor(Math.random() * (i + 1));\n//       [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];\n//     }\n//     return shuffledArray;\n//   };\n\n//   const handleAnswerClick = (questionIndex, answerIndex) => {\n//     if (!answerSelected) {\n//       const newAnswers = [...userAnswers];\n//       newAnswers[questionIndex] = answerIndex;\n//       setUserAnswers(newAnswers);\n//       setAnswerSelected(true);\n\n//       if (questionIndex === data.length - 1) {\n//         // Show the \"Submit\" button when the last question is answered\n//         setShowSubmitButton(true);\n//       }\n//     }\n//   };\n\n//   const handleNextClick = () => {\n//     if (currentQuestionIndex < data.length - 1) {\n//       setCurrentQuestionIndex(currentQuestionIndex + 1);\n//       setAnswerSelected(false);\n//     }\n//   };\n\n//   const handleScoreSubmit = () => {\n//     // Calculate the score when the user chooses to submit\n//     const newScore = userAnswers.reduce((totalScore, answerIndex, questionIndex) => {\n//       const isCorrect = data[questionIndex].answer[answerIndex].is_right;\n//       return isCorrect ? totalScore + 1 : totalScore;\n//     }, 0);\n//     setScore(newScore);\n//     setShowScoreAlert(true);\n//     setShowSubmitButton(false);\n//   };\n\n//   return (\n//     <Container>\n//       {data.length > 0 && currentQuestionIndex < data.length && (\n//         <div>\n//           <h3>\n//             <label htmlFor=\"\">{currentQuestionIndex + 1}) {data[currentQuestionIndex].title}</label>\n//           </h3>\n//           <ul className=\"answer-list\">\n//             {data[currentQuestionIndex].answer.map((answer, answerIndex) => (\n//               <div key={answer.id}>\n//                 <form action=\"\">\n//                   <br />\n//                   <div className=\"main\">\n//                     <Button\n//                       variant={\n//                         answerSelected &&\n//                         (answer.is_right || userAnswers[currentQuestionIndex] === answerIndex)\n//                           ? answer.is_right\n//                             ? \"success\"\n//                             : \"danger\"\n//                           : \"primary\"\n//                       }\n//                       onClick={() => handleAnswerClick(currentQuestionIndex, answerIndex)}\n//                       disabled={answerSelected || showScoreAlert}\n//                       className={answerSelected ? \"disabled-answer\" : \"\"}\n//                     >\n//                       {answerIndex + 1}) {answer.answer_text}\n//                       {answer.is_right ? \" (Correct)\" : \"\"}\n//                     </Button>\n//                   </div>\n//                 </form>\n//               </div>\n//             ))}\n//           </ul>\n//           {answerSelected && currentQuestionIndex < data.length - 1 && (\n//             <Button onClick={handleNextClick} variant=\"primary\">\n//               Next\n//             </Button>\n//           )}\n//           {showSubmitButton && (\n//             <Button onClick={handleScoreSubmit} variant=\"warning\">\n//               Submit\n//             </Button>\n//           )}\n//         </div>\n//       )}\n//       {showScoreAlert && (\n//         <div>\n//           <h3>Your Final Score: {score} out of {data.length}</h3>\n//         </div>\n//       )}\n//     </Container>\n//   );\n// };\n\n// export default Random;\n\nimport React, { useEffect, useState } from \"react\";\nimport { fetchData } from \"../api\";\nimport Container from \"react-bootstrap/Container\";\nimport Button from \"react-bootstrap/Button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Random = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const [userAnswers, setUserAnswers] = useState(Array(5).fill(null)); // Initialize answers array\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [answerSelected, setAnswerSelected] = useState(false);\n  const [showSubmitButton, setShowSubmitButton] = useState(false);\n  const [score, setScore] = useState(0);\n  useEffect(() => {\n    getData();\n  }, []);\n  const getData = async () => {\n    const response = await fetchData('mcq/q/django');\n    const shuffledData = shuffleArray(response);\n    setData(shuffledData);\n  };\n  const shuffleArray = array => {\n    let shuffledArray = array.slice();\n    for (let i = shuffledArray.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];\n    }\n    return shuffledArray;\n  };\n  const handleAnswerClick = (questionIndex, answerIndex) => {\n    if (!answerSelected) {\n      const newAnswers = [...userAnswers];\n      newAnswers[questionIndex] = answerIndex;\n      setUserAnswers(newAnswers);\n      setAnswerSelected(true);\n    }\n  };\n  const handleNextClick = () => {\n    if (currentQuestionIndex < data.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n      setAnswerSelected(false);\n    } else {\n      setShowSubmitButton(true); // Show the \"Submit\" button after the final question\n    }\n  };\n\n  const handleSubmit = () => {\n    const newScore = userAnswers.reduce((totalScore, answerIndex, questionIndex) => {\n      const isCorrect = data[questionIndex].answer[answerIndex].is_right;\n      return isCorrect ? totalScore + 1 : totalScore;\n    }, 0);\n    setScore(newScore);\n\n    // Display the score as an alert\n    alert(`Your Final Score: ${score} out of ${data.length}`);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: data.length > 0 && currentQuestionIndex < data.length && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"\",\n          children: [currentQuestionIndex + 1, \") \", data[currentQuestionIndex].title]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"answer-list\",\n        children: data[currentQuestionIndex].answer.map((answer, answerIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            action: \"\",\n            children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"main\",\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                variant: answerSelected && (answer.is_right || userAnswers[currentQuestionIndex] === answerIndex) ? answer.is_right ? \"success\" : \"danger\" : \"primary\",\n                onClick: () => handleAnswerClick(currentQuestionIndex, answerIndex),\n                disabled: answerSelected,\n                className: answerSelected ? \"disabled-answer\" : \"\",\n                children: [answerIndex + 1, \") \", answer.answer_text, answer.is_right ? \" (Correct)\" : \"\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 212,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 17\n          }, this)\n        }, answer.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 11\n      }, this), answerSelected && currentQuestionIndex < data.length - 1 && /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleNextClick,\n        variant: \"primary\",\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 13\n      }, this), showSubmitButton && currentQuestionIndex === data.length - 1 && /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleSubmit,\n        variant: \"warning\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 200,\n    columnNumber: 5\n  }, this);\n};\n_s(Random, \"ai4jb5hRhVMYYGV1RoOrxezJ2gU=\");\n_c = Random;\nexport default Random;\nvar _c;\n$RefreshReg$(_c, \"Random\");","map":{"version":3,"names":["React","useEffect","useState","fetchData","Container","Button","jsxDEV","_jsxDEV","Random","_s","data","setData","userAnswers","setUserAnswers","Array","fill","currentQuestionIndex","setCurrentQuestionIndex","answerSelected","setAnswerSelected","showSubmitButton","setShowSubmitButton","score","setScore","getData","response","shuffledData","shuffleArray","array","shuffledArray","slice","i","length","j","Math","floor","random","handleAnswerClick","questionIndex","answerIndex","newAnswers","handleNextClick","handleSubmit","newScore","reduce","totalScore","isCorrect","answer","is_right","alert","children","htmlFor","title","fileName","_jsxFileName","lineNumber","columnNumber","className","map","action","variant","onClick","disabled","answer_text","id","_c","$RefreshReg$"],"sources":["D:/MCQ Generator_Frontend/core/src/components/Random.jsx"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\r\n// import { fetchData } from \"../api\";\r\n// import Container from \"react-bootstrap/Container\";\r\n// import Button from \"react-bootstrap/Button\";\r\n\r\n// export const Random = () => {\r\n//   const [data, setData] = useState([]);\r\n//   const [userAnswers, setUserAnswers] = useState([]);\r\n//   const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n//   const [answerSelected, setAnswerSelected] = useState(false);\r\n//   const [score, setScore] = useState(0); // Track the user's score\r\n//   const [showScoreAlert, setShowScoreAlert] = useState(false); // Control when to show the score alert\r\n//   const [showSubmitButton, setShowSubmitButton] = useState(false); // Control when to show the \"Submit\" button\r\n\r\n//   useEffect(() => {\r\n//     getData();\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     if (answerSelected && currentQuestionIndex === data.length - 1) {\r\n//       // Calculate the score when all questions have been answered\r\n//       const newScore = userAnswers.reduce((totalScore, answerIndex, questionIndex) => {\r\n//         const isCorrect = data[questionIndex].answer[answerIndex].is_right;\r\n//         return isCorrect ? totalScore + 1 : totalScore;\r\n//       }, 0);\r\n//       setScore(newScore);\r\n//       setShowScoreAlert(true);\r\n//       setShowSubmitButton(false); // Hide the \"Submit\" button after showing the score\r\n//     }\r\n//   }, [userAnswers, currentQuestionIndex, answerSelected, data, score]);\r\n\r\n//   const getData = async () => {\r\n//     const response = await fetchData('mcq/q/django');\r\n//     const shuffledData = shuffleArray(response);\r\n//     setData(shuffledData);\r\n//   };\r\n\r\n//   const shuffleArray = (array) => {\r\n//     let shuffledArray = array.slice();\r\n//     for (let i = shuffledArray.length - 1; i > 0; i--) {\r\n//       const j = Math.floor(Math.random() * (i + 1));\r\n//       [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];\r\n//     }\r\n//     return shuffledArray;\r\n//   };\r\n\r\n//   const handleAnswerClick = (questionIndex, answerIndex) => {\r\n//     if (!answerSelected) {\r\n//       const newAnswers = [...userAnswers];\r\n//       newAnswers[questionIndex] = answerIndex;\r\n//       setUserAnswers(newAnswers);\r\n//       setAnswerSelected(true);\r\n\r\n//       if (questionIndex === data.length - 1) {\r\n//         // Show the \"Submit\" button when the last question is answered\r\n//         setShowSubmitButton(true);\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   const handleNextClick = () => {\r\n//     if (currentQuestionIndex < data.length - 1) {\r\n//       setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n//       setAnswerSelected(false);\r\n//     }\r\n//   };\r\n\r\n//   const handleScoreSubmit = () => {\r\n//     // Calculate the score when the user chooses to submit\r\n//     const newScore = userAnswers.reduce((totalScore, answerIndex, questionIndex) => {\r\n//       const isCorrect = data[questionIndex].answer[answerIndex].is_right;\r\n//       return isCorrect ? totalScore + 1 : totalScore;\r\n//     }, 0);\r\n//     setScore(newScore);\r\n//     setShowScoreAlert(true);\r\n//     setShowSubmitButton(false);\r\n//   };\r\n\r\n//   return (\r\n//     <Container>\r\n//       {data.length > 0 && currentQuestionIndex < data.length && (\r\n//         <div>\r\n//           <h3>\r\n//             <label htmlFor=\"\">{currentQuestionIndex + 1}) {data[currentQuestionIndex].title}</label>\r\n//           </h3>\r\n//           <ul className=\"answer-list\">\r\n//             {data[currentQuestionIndex].answer.map((answer, answerIndex) => (\r\n//               <div key={answer.id}>\r\n//                 <form action=\"\">\r\n//                   <br />\r\n//                   <div className=\"main\">\r\n//                     <Button\r\n//                       variant={\r\n//                         answerSelected &&\r\n//                         (answer.is_right || userAnswers[currentQuestionIndex] === answerIndex)\r\n//                           ? answer.is_right\r\n//                             ? \"success\"\r\n//                             : \"danger\"\r\n//                           : \"primary\"\r\n//                       }\r\n//                       onClick={() => handleAnswerClick(currentQuestionIndex, answerIndex)}\r\n//                       disabled={answerSelected || showScoreAlert}\r\n//                       className={answerSelected ? \"disabled-answer\" : \"\"}\r\n//                     >\r\n//                       {answerIndex + 1}) {answer.answer_text}\r\n//                       {answer.is_right ? \" (Correct)\" : \"\"}\r\n//                     </Button>\r\n//                   </div>\r\n//                 </form>\r\n//               </div>\r\n//             ))}\r\n//           </ul>\r\n//           {answerSelected && currentQuestionIndex < data.length - 1 && (\r\n//             <Button onClick={handleNextClick} variant=\"primary\">\r\n//               Next\r\n//             </Button>\r\n//           )}\r\n//           {showSubmitButton && (\r\n//             <Button onClick={handleScoreSubmit} variant=\"warning\">\r\n//               Submit\r\n//             </Button>\r\n//           )}\r\n//         </div>\r\n//       )}\r\n//       {showScoreAlert && (\r\n//         <div>\r\n//           <h3>Your Final Score: {score} out of {data.length}</h3>\r\n//         </div>\r\n//       )}\r\n//     </Container>\r\n//   );\r\n// };\r\n\r\n// export default Random;\r\n\r\n\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { fetchData } from \"../api\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nexport const Random = () => {\r\n  const [data, setData] = useState([]);\r\n  const [userAnswers, setUserAnswers] = useState(Array(5).fill(null)); // Initialize answers array\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [answerSelected, setAnswerSelected] = useState(false);\r\n  const [showSubmitButton, setShowSubmitButton] = useState(false);\r\n  const [score, setScore] = useState(0);\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  const getData = async () => {\r\n    const response = await fetchData('mcq/q/django');\r\n    const shuffledData = shuffleArray(response);\r\n    setData(shuffledData);\r\n  };\r\n\r\n  const shuffleArray = (array) => {\r\n    let shuffledArray = array.slice();\r\n    for (let i = shuffledArray.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];\r\n    }\r\n    return shuffledArray;\r\n  };\r\n\r\n  const handleAnswerClick = (questionIndex, answerIndex) => {\r\n    if (!answerSelected) {\r\n      const newAnswers = [...userAnswers];\r\n      newAnswers[questionIndex] = answerIndex;\r\n      setUserAnswers(newAnswers);\r\n      setAnswerSelected(true);\r\n    }\r\n  };\r\n\r\n  const handleNextClick = () => {\r\n    if (currentQuestionIndex < data.length - 1) {\r\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n      setAnswerSelected(false);\r\n    } else {\r\n      setShowSubmitButton(true); // Show the \"Submit\" button after the final question\r\n    }\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    const newScore = userAnswers.reduce((totalScore, answerIndex, questionIndex) => {\r\n      const isCorrect = data[questionIndex].answer[answerIndex].is_right;\r\n      return isCorrect ? totalScore + 1 : totalScore;\r\n    }, 0);\r\n    setScore(newScore);\r\n\r\n    // Display the score as an alert\r\n    alert(`Your Final Score: ${score} out of ${data.length}`);\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      {data.length > 0 && currentQuestionIndex < data.length && (\r\n        <div>\r\n          <h3>\r\n            <label htmlFor=\"\">{currentQuestionIndex + 1}) {data[currentQuestionIndex].title}</label>\r\n          </h3>\r\n          <ul className=\"answer-list\">\r\n            {data[currentQuestionIndex].answer.map((answer, answerIndex) => (\r\n              <div key={answer.id}>\r\n                <form action=\"\">\r\n                  <br />\r\n                  <div className=\"main\">\r\n                    <Button\r\n                      variant={\r\n                        answerSelected &&\r\n                        (answer.is_right || userAnswers[currentQuestionIndex] === answerIndex)\r\n                          ? answer.is_right\r\n                            ? \"success\"\r\n                            : \"danger\"\r\n                          : \"primary\"\r\n                      }\r\n                      onClick={() => handleAnswerClick(currentQuestionIndex, answerIndex)}\r\n                      disabled={answerSelected}\r\n                      className={answerSelected ? \"disabled-answer\" : \"\"}\r\n                    >\r\n                      {answerIndex + 1}) {answer.answer_text}\r\n                      {answer.is_right ? \" (Correct)\" : \"\"}\r\n                    </Button>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n            ))}\r\n          </ul>\r\n          {answerSelected && currentQuestionIndex < data.length - 1 && (\r\n            <Button onClick={handleNextClick} variant=\"primary\">\r\n              Next\r\n            </Button>\r\n          )}\r\n          {showSubmitButton && currentQuestionIndex === data.length - 1 && (\r\n            <Button onClick={handleSubmit} variant=\"warning\">\r\n              Submit\r\n            </Button>\r\n          )}\r\n        </div>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Random;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,QAAQ;AAClC,OAAOC,SAAS,MAAM,2BAA2B;AACjD,OAAOC,MAAM,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,OAAO,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACU,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAACY,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;EACrE,MAAM,CAACC,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGf,QAAQ,CAAC,CAAC,CAAC;EACnE,MAAM,CAACgB,cAAc,EAAEC,iBAAiB,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;EAC3D,MAAM,CAACkB,gBAAgB,EAAEC,mBAAmB,CAAC,GAA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}