{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport axios from 'axios';\nconst CollectData = url => {\n  _s();\n  const [isFetching, setFetching] = useState(false);\n  const [dataState, setDataState] = useState({\n    data: []\n  }); // Initialize data as an empty array\n  const [apiUrl] = useState(url);\n  useEffect(() => {\n    const fetchDataFromApi = async () => {\n      try {\n        setFetching(true); // Update isFetching to true\n\n        const response = await axios.get(apiUrl);\n        setDataState({\n          data: response.data\n        }); // Update data with the response data\n\n        setFetching(false); // Update isFetching back to false\n      } catch (e) {\n        setFetching(false); // Update isFetching in case of an error\n      }\n    };\n\n    fetchDataFromApi();\n  }, [apiUrl]); // Include apiUrl as a dependency\n\n  return [dataState, isFetching]; // Return isFetching along with dataState\n};\n_s(CollectData, \"BHJsBL37Uf4kanlekvVuWScYxOo=\");\n_c = CollectData;\nexport default CollectData;\nvar _c;\n$RefreshReg$(_c, \"CollectData\");","map":{"version":3,"names":["useEffect","useState","axios","CollectData","url","_s","isFetching","setFetching","dataState","setDataState","data","apiUrl","fetchDataFromApi","response","get","e","_c","$RefreshReg$"],"sources":["D:/MCQ Generator_Frontend/core/src/api/ConnectAPI.js"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst CollectData = (url) => {\r\n  const [isFetching, setFetching] = useState(false);\r\n  const [dataState, setDataState] = useState({ data: [] }); // Initialize data as an empty array\r\n  const [apiUrl] = useState(url);\r\n\r\n  useEffect(() => {\r\n    const fetchDataFromApi = async () => {\r\n      try {\r\n        setFetching(true); // Update isFetching to true\r\n\r\n        const response = await axios.get(apiUrl);\r\n\r\n        setDataState({ data: response.data }); // Update data with the response data\r\n\r\n        setFetching(false); // Update isFetching back to false\r\n      } catch (e) {\r\n        setFetching(false); // Update isFetching in case of an error\r\n      }\r\n    };\r\n\r\n    fetchDataFromApi();\r\n  }, [apiUrl]); // Include apiUrl as a dependency\r\n\r\n  return [dataState, isFetching]; // Return isFetching along with dataState\r\n};\r\n\r\nexport default CollectData;"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,WAAW,GAAIC,GAAG,IAAK;EAAAC,EAAA;EAC3B,MAAM,CAACC,UAAU,EAAEC,WAAW,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACO,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC;IAAES,IAAI,EAAE;EAAG,CAAC,CAAC,CAAC,CAAC;EAC1D,MAAM,CAACC,MAAM,CAAC,GAAGV,QAAQ,CAACG,GAAG,CAAC;EAE9BJ,SAAS,CAAC,MAAM;IACd,MAAMY,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACnC,IAAI;QACFL,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;;QAEnB,MAAMM,QAAQ,GAAG,MAAMX,KAAK,CAACY,GAAG,CAACH,MAAM,CAAC;QAExCF,YAAY,CAAC;UAAEC,IAAI,EAAEG,QAAQ,CAACH;QAAK,CAAC,CAAC,CAAC,CAAC;;QAEvCH,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;MACtB,CAAC,CAAC,OAAOQ,CAAC,EAAE;QACVR,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;MACtB;IACF,CAAC;;IAEDK,gBAAgB,CAAC,CAAC;EACpB,CAAC,EAAE,CAACD,MAAM,CAAC,CAAC,CAAC,CAAC;;EAEd,OAAO,CAACH,SAAS,EAAEF,UAAU,CAAC,CAAC,CAAC;AAClC,CAAC;AAACD,EAAA,CAxBIF,WAAW;AAAAa,EAAA,GAAXb,WAAW;AA0BjB,eAAeA,WAAW;AAAC,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}