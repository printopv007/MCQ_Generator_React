{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport axios from 'axios';\nconst CollectData = url => {\n  _s();\n  const [dataState, setDataState] = useState({\n    data: []\n  });\n  const apiUrl = url; // No need to use useState for the API URL\n\n  useEffect(() => {\n    console.log(\"Mounting or Re-rendering...\");\n    const fetchDataFromApi = async () => {\n      try {\n        const response = await axios.get(apiUrl);\n        setDataState({\n          data: response.data\n        }); // Update dataState with the response data\n      } catch (e) {\n        console.log(e);\n      }\n    };\n    fetchDataFromApi();\n  }, []); // Include apiUrl in the dependency array to re-fetch when it changes\n\n  return [dataState, isFetching]; // Return isFetching state as well for better control\n};\n_s(CollectData, \"PBfWWw4m0BreCkr8gLRoAmJWubI=\");\n_c = CollectData;\nexport default CollectData;\nvar _c;\n$RefreshReg$(_c, \"CollectData\");","map":{"version":3,"names":["useEffect","useState","axios","CollectData","url","_s","dataState","setDataState","data","apiUrl","console","log","fetchDataFromApi","response","get","e","isFetching","_c","$RefreshReg$"],"sources":["D:/MCQ Generator_Frontend/core/src/api/ConnectAPI.jsx"],"sourcesContent":["import  { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst CollectData = (url) => {\r\n    const [dataState, setDataState] = useState({ data: [] });\r\n    const apiUrl = url; // No need to use useState for the API URL\r\n\r\n     useEffect(() => {\r\n        console.log(\"Mounting or Re-rendering...\");\r\n        const fetchDataFromApi = async () => {\r\n            try {\r\n\r\n                const response = await axios.get(apiUrl);\r\n\r\n                setDataState({ data: response.data }); // Update dataState with the response data\r\n                \r\n\r\n            } catch (e) {\r\n                console.log(e);\r\n            }\r\n        };\r\n\r\n        fetchDataFromApi();\r\n     }, []); // Include apiUrl in the dependency array to re-fetch when it changes\r\n\r\n    return [dataState, isFetching]; // Return isFetching state as well for better control\r\n};\r\n\r\nexport default CollectData;\r\n"],"mappings":";AAAA,SAAUA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC5C,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,WAAW,GAAIC,GAAG,IAAK;EAAAC,EAAA;EACzB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,CAAC;IAAEO,IAAI,EAAE;EAAG,CAAC,CAAC;EACxD,MAAMC,MAAM,GAAGL,GAAG,CAAC,CAAC;;EAEnBJ,SAAS,CAAC,MAAM;IACbU,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;IAC1C,MAAMC,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI;QAEA,MAAMC,QAAQ,GAAG,MAAMX,KAAK,CAACY,GAAG,CAACL,MAAM,CAAC;QAExCF,YAAY,CAAC;UAAEC,IAAI,EAAEK,QAAQ,CAACL;QAAK,CAAC,CAAC,CAAC,CAAC;MAG3C,CAAC,CAAC,OAAOO,CAAC,EAAE;QACRL,OAAO,CAACC,GAAG,CAACI,CAAC,CAAC;MAClB;IACJ,CAAC;IAEDH,gBAAgB,CAAC,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAET,OAAO,CAACN,SAAS,EAAEU,UAAU,CAAC,CAAC,CAAC;AACpC,CAAC;AAACX,EAAA,CAvBIF,WAAW;AAAAc,EAAA,GAAXd,WAAW;AAyBjB,eAAeA,WAAW;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}