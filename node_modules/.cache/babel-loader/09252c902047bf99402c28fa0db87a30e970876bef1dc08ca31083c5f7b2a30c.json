{"ast":null,"code":"// import React, { useEffect, useState } from \"react\";\n// import { fetchData } from \"../api\";\n// import Container from \"react-bootstrap/Container\";\n// import Button from \"react-bootstrap/Button\";\n\n// export const Random = () => {\n//   const [data, setData] = useState([]);\n//   const [userAnswers, setUserAnswers] = useState([]);\n//   const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n//   const [answerSelected, setAnswerSelected] = useState(false);\n\n//   useEffect(() => {\n//     getData();\n//   }, []);\n\n//   const getData = async () => {\n//     const response = await fetchData('mcq/q/django');\n//     // Shuffle the questions array\n//     const shuffledData = shuffleArray(response);\n//     setData(shuffledData);\n//   };\n\n//   const shuffleArray = (array) => {\n//     let shuffledArray = array.slice();\n//     for (let i = shuffledArray.length - 1; i > 0; i--) {\n//       const j = Math.floor(Math.random() * (i + 1));\n//       [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];\n//     }\n//     return shuffledArray;\n//   };\n\n//   const handleAnswerClick = (questionIndex, answerIndex) => {\n//     const newAnswers = [...userAnswers];\n//     newAnswers[questionIndex] = answerIndex;\n//     setUserAnswers(newAnswers);\n//     setAnswerSelected(true);\n//   };\n\n//   const handleNextClick = () => {\n//     if (currentQuestionIndex < data.length - 1) {\n//       setCurrentQuestionIndex(currentQuestionIndex + 1);\n//       setAnswerSelected(false);\n//     }\n//   };\n\n//   return (\n//     <Container>\n//       {data.length > 0 && (\n//         <div>\n//           <h3>\n//             <label htmlFor=\"\">{currentQuestionIndex + 1}) {data[currentQuestionIndex].title}</label>\n//           </h3>\n//           <ul className=\"answer-list\">\n//             {data[currentQuestionIndex].answer.map((answer, answerIndex) => (\n//               <div key={answer.id}>\n//                 <form action=\"\">\n//                   <br />\n//                   <div className=\"main\">\n//                     <Button\n//                       variant={\n//                         userAnswers[currentQuestionIndex] === answerIndex\n//                           ? answer.is_right\n//                             ? \"success\"\n//                             : \"danger\"\n//                           : \"primary\"\n//                       }\n//                       onClick={() => handleAnswerClick(currentQuestionIndex, answerIndex)}\n//                       disabled={answerSelected}\n//                     >\n//                       {answerIndex + 1}) {answer.answer_text}\n//                       {answer.is_right ? \" \" : \"\"}\n//                     </Button>\n//                   </div>\n//                 </form>\n//               </div>\n//             ))}\n//           </ul>\n//           {answerSelected && currentQuestionIndex < data.length - 1 && (\n//             <Button onClick={handleNextClick} variant=\"primary\">\n//               Next\n//             </Button>\n//           )}\n//         </div>\n//       )}\n//     </Container>\n//   );\n// };\n\n// export default Random;\n\n// import React, { useEffect, useState } from \"react\";\n// import { fetchData } from \"../api\";\n// import Container from \"react-bootstrap/Container\";\n// import Button from \"react-bootstrap/Button\";\n\n// export const Random = () => {\n//   const [data, setData] = useState([]);\n//   const [userAnswers, setUserAnswers] = useState([]);\n//   const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n//   const [answerSelected, setAnswerSelected] = useState(false);\n\n//   useEffect(() => {\n//     getData();\n//   }, []);\n\n//   const getData = async () => {\n//     const response = await fetchData('mcq/q/django');\n//     const shuffledData = shuffleArray(response);\n//     setData(shuffledData);\n//   };\n\n//   const shuffleArray = (array) => {\n//     let shuffledArray = array.slice();\n//     for (let i = shuffledArray.length - 1; i > 0; i--) {\n//       const j = Math.floor(Math.random() * (i + 1));\n//       [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];\n//     }\n//     return shuffledArray;\n//   };\n\n//   const handleAnswerClick = (questionIndex, answerIndex) => {\n//     const newAnswers = [...userAnswers];\n//     newAnswers[questionIndex] = answerIndex;\n//     setUserAnswers(newAnswers);\n//     setAnswerSelected(true);\n//   };\n\n//   const handleNextClick = () => {\n//     if (currentQuestionIndex < data.length - 1) {\n//       setCurrentQuestionIndex(currentQuestionIndex + 1);\n//       setAnswerSelected(false);\n//     }\n//   };\n\n//   const renderAnswerButton = (answer, answerIndex) => {\n//     const isCorrect = answerIndex === data[currentQuestionIndex].correct_answer_index;\n\n//     return (\n//       <Button\n//         variant={\n//           userAnswers[currentQuestionIndex] === answerIndex\n//             ? answer.is_right \n//               ? \"success\"\n//               : \"danger\"\n//             : \"primary\"\n\n//         }\n\n//         onClick={() => handleAnswerClick(currentQuestionIndex, answerIndex)}\n//         disabled={answerSelected}\n//       >\n//         {answerIndex + 1}) {answer.answer_text}\n//         {isCorrect && ` (Correct)`}\n//         {answer.is_right && !isCorrect && ` (Actual Correct)`}\n//       </Button>\n//     );\n//   };\n\n//   return (\n//     <Container>\n//       {data.length > 0 && (\n//         <div>\n//           <h3>\n//             <label htmlFor=\"\">{currentQuestionIndex + 1}) {data[currentQuestionIndex].title}</label>\n//           </h3>\n//           <ul className=\"answer-list\">\n//             {data[currentQuestionIndex].answer.map((answer, answerIndex) => (\n//               <div key={answer.id}>\n//                 <form action=\"\">\n//                   <br />\n//                   <div className=\"main\">\n//                     {renderAnswerButton(answer, answerIndex)}\n//                   </div>\n//                 </form>\n//               </div>\n//             ))}\n//           </ul>\n//           {answerSelected && currentQuestionIndex < data.length - 1 && (\n//             <Button onClick={handleNextClick} variant=\"primary\">\n//               Next\n//             </Button>\n//           )}\n//         </div>\n//       )}\n//     </Container>\n//   );\n// };\n\n// export default Random;","map":{"version":3,"names":[],"sources":["D:/MCQ Generator_Frontend/core/src/components/Random.jsx"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\r\n// import { fetchData } from \"../api\";\r\n// import Container from \"react-bootstrap/Container\";\r\n// import Button from \"react-bootstrap/Button\";\r\n\r\n// export const Random = () => {\r\n//   const [data, setData] = useState([]);\r\n//   const [userAnswers, setUserAnswers] = useState([]);\r\n//   const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n//   const [answerSelected, setAnswerSelected] = useState(false);\r\n\r\n//   useEffect(() => {\r\n//     getData();\r\n//   }, []);\r\n\r\n//   const getData = async () => {\r\n//     const response = await fetchData('mcq/q/django');\r\n//     // Shuffle the questions array\r\n//     const shuffledData = shuffleArray(response);\r\n//     setData(shuffledData);\r\n//   };\r\n\r\n//   const shuffleArray = (array) => {\r\n//     let shuffledArray = array.slice();\r\n//     for (let i = shuffledArray.length - 1; i > 0; i--) {\r\n//       const j = Math.floor(Math.random() * (i + 1));\r\n//       [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];\r\n//     }\r\n//     return shuffledArray;\r\n//   };\r\n\r\n//   const handleAnswerClick = (questionIndex, answerIndex) => {\r\n//     const newAnswers = [...userAnswers];\r\n//     newAnswers[questionIndex] = answerIndex;\r\n//     setUserAnswers(newAnswers);\r\n//     setAnswerSelected(true);\r\n//   };\r\n\r\n//   const handleNextClick = () => {\r\n//     if (currentQuestionIndex < data.length - 1) {\r\n//       setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n//       setAnswerSelected(false);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <Container>\r\n//       {data.length > 0 && (\r\n//         <div>\r\n//           <h3>\r\n//             <label htmlFor=\"\">{currentQuestionIndex + 1}) {data[currentQuestionIndex].title}</label>\r\n//           </h3>\r\n//           <ul className=\"answer-list\">\r\n//             {data[currentQuestionIndex].answer.map((answer, answerIndex) => (\r\n//               <div key={answer.id}>\r\n//                 <form action=\"\">\r\n//                   <br />\r\n//                   <div className=\"main\">\r\n//                     <Button\r\n//                       variant={\r\n//                         userAnswers[currentQuestionIndex] === answerIndex\r\n//                           ? answer.is_right\r\n//                             ? \"success\"\r\n//                             : \"danger\"\r\n//                           : \"primary\"\r\n//                       }\r\n//                       onClick={() => handleAnswerClick(currentQuestionIndex, answerIndex)}\r\n//                       disabled={answerSelected}\r\n//                     >\r\n//                       {answerIndex + 1}) {answer.answer_text}\r\n//                       {answer.is_right ? \" \" : \"\"}\r\n//                     </Button>\r\n//                   </div>\r\n//                 </form>\r\n//               </div>\r\n//             ))}\r\n//           </ul>\r\n//           {answerSelected && currentQuestionIndex < data.length - 1 && (\r\n//             <Button onClick={handleNextClick} variant=\"primary\">\r\n//               Next\r\n//             </Button>\r\n//           )}\r\n//         </div>\r\n//       )}\r\n//     </Container>\r\n//   );\r\n// };\r\n\r\n// export default Random;\r\n\r\n\r\n\r\n\r\n// import React, { useEffect, useState } from \"react\";\r\n// import { fetchData } from \"../api\";\r\n// import Container from \"react-bootstrap/Container\";\r\n// import Button from \"react-bootstrap/Button\";\r\n\r\n// export const Random = () => {\r\n//   const [data, setData] = useState([]);\r\n//   const [userAnswers, setUserAnswers] = useState([]);\r\n//   const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n//   const [answerSelected, setAnswerSelected] = useState(false);\r\n\r\n//   useEffect(() => {\r\n//     getData();\r\n//   }, []);\r\n\r\n//   const getData = async () => {\r\n//     const response = await fetchData('mcq/q/django');\r\n//     const shuffledData = shuffleArray(response);\r\n//     setData(shuffledData);\r\n//   };\r\n\r\n//   const shuffleArray = (array) => {\r\n//     let shuffledArray = array.slice();\r\n//     for (let i = shuffledArray.length - 1; i > 0; i--) {\r\n//       const j = Math.floor(Math.random() * (i + 1));\r\n//       [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];\r\n//     }\r\n//     return shuffledArray;\r\n//   };\r\n\r\n//   const handleAnswerClick = (questionIndex, answerIndex) => {\r\n//     const newAnswers = [...userAnswers];\r\n//     newAnswers[questionIndex] = answerIndex;\r\n//     setUserAnswers(newAnswers);\r\n//     setAnswerSelected(true);\r\n//   };\r\n\r\n//   const handleNextClick = () => {\r\n//     if (currentQuestionIndex < data.length - 1) {\r\n//       setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n//       setAnswerSelected(false);\r\n//     }\r\n//   };\r\n\r\n//   const renderAnswerButton = (answer, answerIndex) => {\r\n//     const isCorrect = answerIndex === data[currentQuestionIndex].correct_answer_index;\r\n\r\n//     return (\r\n//       <Button\r\n//         variant={\r\n//           userAnswers[currentQuestionIndex] === answerIndex\r\n//             ? answer.is_right \r\n//               ? \"success\"\r\n//               : \"danger\"\r\n//             : \"primary\"\r\n            \r\n//         }\r\n\r\n//         onClick={() => handleAnswerClick(currentQuestionIndex, answerIndex)}\r\n//         disabled={answerSelected}\r\n//       >\r\n//         {answerIndex + 1}) {answer.answer_text}\r\n//         {isCorrect && ` (Correct)`}\r\n//         {answer.is_right && !isCorrect && ` (Actual Correct)`}\r\n//       </Button>\r\n//     );\r\n//   };\r\n\r\n//   return (\r\n//     <Container>\r\n//       {data.length > 0 && (\r\n//         <div>\r\n//           <h3>\r\n//             <label htmlFor=\"\">{currentQuestionIndex + 1}) {data[currentQuestionIndex].title}</label>\r\n//           </h3>\r\n//           <ul className=\"answer-list\">\r\n//             {data[currentQuestionIndex].answer.map((answer, answerIndex) => (\r\n//               <div key={answer.id}>\r\n//                 <form action=\"\">\r\n//                   <br />\r\n//                   <div className=\"main\">\r\n//                     {renderAnswerButton(answer, answerIndex)}\r\n//                   </div>\r\n//                 </form>\r\n//               </div>\r\n//             ))}\r\n//           </ul>\r\n//           {answerSelected && currentQuestionIndex < data.length - 1 && (\r\n//             <Button onClick={handleNextClick} variant=\"primary\">\r\n//               Next\r\n//             </Button>\r\n//           )}\r\n//         </div>\r\n//       )}\r\n//     </Container>\r\n//   );\r\n// };\r\n\r\n// export default Random;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAKA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}