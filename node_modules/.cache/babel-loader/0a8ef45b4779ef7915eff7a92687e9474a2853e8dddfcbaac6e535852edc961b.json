{"ast":null,"code":"var _jsxFileName = \"E:\\\\MCQ_Generator_Task\\\\core\\\\src\\\\components\\\\Random.jsx\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n// import { fetchData } from \"../api\";\n// import Container from \"react-bootstrap/Container\";\n// import Button from \"react-bootstrap/Button\";\n\n// export const Random = () => {\n//   const [data, setData] = useState([]);\n//   const [userAnswers, setUserAnswers] = useState([]);\n//   const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n//   const [answerSelected, setAnswerSelected] = useState(false);\n//   const [score, setScore] = useState(0); // Track the user's score\n//   const [showScoreAlert, setShowScoreAlert] = useState(false); // Control when to show the score alert\n//   const [showSubmitButton, setShowSubmitButton] = useState(false); // Control when to show the \"Submit\" button\n\n//   useEffect(() => {\n//     getData();\n//   }, []);\n\n//   useEffect(() => {\n//     if (answerSelected && currentQuestionIndex === data.length - 1) {\n//       // Calculate the score when all questions have been answered\n//       const newScore = userAnswers.reduce((totalScore, answerIndex, questionIndex) => {\n//         const isCorrect = data[questionIndex].answer[answerIndex].is_right;\n//         return isCorrect ? totalScore + 1 : totalScore;\n//       }, 0);\n//       setScore(newScore);\n//       setShowScoreAlert(true);\n//       setShowSubmitButton(false); // Hide the \"Submit\" button after showing the score\n//     }\n//   }, [userAnswers, currentQuestionIndex, answerSelected, data, score]);\n\n//   const getData = async () => {\n//     const response = await fetchData('mcq/q/django');\n//     const shuffledData = shuffleArray(response);\n//     setData(shuffledData);\n//   };\n\n//   const shuffleArray = (array) => {\n//     let shuffledArray = array.slice();\n//     for (let i = shuffledArray.length - 1; i > 0; i--) {\n//       const j = Math.floor(Math.random() * (i + 1));\n//       [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];\n//     }\n//     return shuffledArray;\n//   };\n\n//   const handleAnswerClick = (questionIndex, answerIndex) => {\n//     if (!answerSelected) {\n//       const newAnswers = [...userAnswers];\n//       newAnswers[questionIndex] = answerIndex;\n//       setUserAnswers(newAnswers);\n//       setAnswerSelected(true);\n\n//       if (questionIndex === data.length - 1) {\n//         // Show the \"Submit\" button when the last question is answered\n//         setShowSubmitButton(true);\n//       }\n//     }\n//   };\n\n//   const handleNextClick = () => {\n//     if (currentQuestionIndex < data.length - 1) {\n//       setCurrentQuestionIndex(currentQuestionIndex + 1);\n//       setAnswerSelected(false);\n//     }\n//   };\n\n//   const handleScoreSubmit = () => {\n//     // Calculate the score when the user chooses to submit\n//     const newScore = userAnswers.reduce((totalScore, answerIndex, questionIndex) => {\n//       const isCorrect = data[questionIndex].answer[answerIndex].is_right;\n//       return isCorrect ? totalScore + 1 : totalScore;\n//     }, 0);\n//     setScore(newScore);\n//     setShowScoreAlert(true);\n//     setShowSubmitButton(false);\n//   };\n\n//   return (\n//     <Container>\n//       {data.length > 0 && currentQuestionIndex < data.length && (\n//         <div>\n//           <h3>\n//             <label htmlFor=\"\">{currentQuestionIndex + 1}) {data[currentQuestionIndex].title}</label>\n//           </h3>\n//           <ul className=\"answer-list\">\n//             {data[currentQuestionIndex].answer.map((answer, answerIndex) => (\n//               <div key={answer.id}>\n//                 <form action=\"\">\n//                   <br />\n//                   <div className=\"main\">\n//                     <Button \n//                       variant={\n//                         answerSelected &&\n//                         (answer.is_right || userAnswers[currentQuestionIndex] === answerIndex)\n//                           ? answer.is_right\n//                             ? \"success\"\n//                             : \"danger\"\n//                           : \"primary\"\n//                       }\n//                       onClick={() => handleAnswerClick(currentQuestionIndex, answerIndex)}\n//                       disabled={answerSelected || showScoreAlert}\n//                       className={answerSelected ? \"disabled-answer\" : \"\"}\n//                       style={{width:'20rem'}}\n//                     >\n//                       {answerIndex + 1}) {answer.answer_text}\n//                       {answer.is_right ? \"\" : \"\"}\n//                     </Button>\n//                   </div>\n//                 </form>\n//               </div>\n//             ))}\n//           </ul>\n//           {answerSelected && currentQuestionIndex < data.length - 1 && (\n//             <Button  onClick={handleNextClick} variant=\"primary\">\n//               Next\n//             </Button>\n//           )}\n//           {showSubmitButton && (\n//             <Button onClick={handleScoreSubmit} variant=\"warning\">\n//               Submit\n//             </Button>\n//           )}\n//         </div>\n//       )}\n//       {showScoreAlert && (\n//         <div>\n//           <h1>Your Final Score: {score} out of {data.length}</h1>\n//         </div>\n//       )}\n//     </Container>\n//   );\n// };\n\n// export default Random;\n\nimport React, { useEffect, useState } from \"react\";\nimport { fetchData } from \"../api\";\nimport Container from \"react-bootstrap/Container\";\nimport Button from \"react-bootstrap/Button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Random = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const [userAnswers, setUserAnswers] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [answerSelected, setAnswerSelected] = useState(false);\n  const [score, setScore] = useState(0); // Track the user's score\n  const [showScoreAlert, setShowScoreAlert] = useState(false); // Control when to show the score alert\n  const [showSubmitButton, setShowSubmitButton] = useState(false); // Control when to show the \"Submit\" button\n\n  useEffect(() => {\n    getData();\n  }, []);\n  useEffect(() => {\n    if (answerSelected && currentQuestionIndex === data.length - 1) {\n      // Calculate the score when all questions have been answered\n      const newScore = userAnswers.reduce((totalScore, answerIndex, questionIndex) => {\n        const isCorrect = data[questionIndex].answer[answerIndex].is_right;\n        return isCorrect ? totalScore + 1 : totalScore;\n      }, 0);\n      setScore(newScore);\n      setShowScoreAlert(true);\n      setShowSubmitButton(false); // Hide the \"Submit\" button after showing the score\n    }\n  }, [userAnswers, currentQuestionIndex, answerSelected, data, score]);\n  const getData = async () => {\n    const response = await fetchData('mcq/q/django');\n    const shuffledData = shuffleArray(response);\n    setData(shuffledData);\n  };\n  const shuffleArray = array => {\n    return array.map(question => {\n      const answers = shuffleAnswers(question.answer);\n      return {\n        ...question,\n        answer: answers\n      };\n    });\n  };\n  const shuffleAnswers = answers => {\n    let shuffledAnswers = answers.slice();\n    for (let i = shuffledAnswers.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [shuffledAnswers[i], shuffledAnswers[j]] = [shuffledAnswers[j], shuffledAnswers[i]];\n    }\n    return shuffledAnswers;\n  };\n  const handleAnswerClick = (questionIndex, answerIndex) => {\n    if (!answerSelected) {\n      const newAnswers = [...userAnswers];\n      newAnswers[questionIndex] = answerIndex;\n      setUserAnswers(newAnswers);\n      setAnswerSelected(true);\n      if (questionIndex === data.length - 1) {\n        // Show the \"Submit\" button when the last question is answered\n        setShowSubmitButton(true);\n      }\n    }\n  };\n  const handleNextClick = () => {\n    if (currentQuestionIndex < data.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n      setAnswerSelected(false);\n    }\n  };\n  const handleScoreSubmit = () => {\n    // Calculate the score when the user chooses to submit\n    const newScore = userAnswers.reduce((totalScore, answerIndex, questionIndex) => {\n      const isCorrect = data[questionIndex].answer[answerIndex].is_right;\n      return isCorrect ? totalScore + 1 : totalScore;\n    }, 0);\n    setScore(newScore);\n    setShowScoreAlert(true);\n    setShowSubmitButton(false);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [data.length > 0 && currentQuestionIndex < data.length && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"\",\n          children: [currentQuestionIndex + 1, \") \", data[currentQuestionIndex].title]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"answer-list\",\n        children: data[currentQuestionIndex].answer.map((answer, answerIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            action: \"\",\n            children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 238,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"main\",\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                variant: answerSelected && (answer.is_right || userAnswers[currentQuestionIndex] === answerIndex) ? answer.is_right ? \"success\" : \"danger\" : \"primary\",\n                onClick: () => handleAnswerClick(currentQuestionIndex, answerIndex),\n                disabled: answerSelected || showScoreAlert,\n                className: answerSelected ? \"disabled-answer\" : \"\",\n                style: {\n                  width: '20rem'\n                },\n                children: [answerIndex + 1, \") \", answer.answer_text, answer.is_right ? \"\" : \"\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 240,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 17\n          }, this)\n        }, answer.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 11\n      }, this), answerSelected && currentQuestionIndex < data.length - 1 && /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleNextClick,\n        variant: \"primary\",\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 13\n      }, this), showSubmitButton && /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleScoreSubmit,\n        variant: \"warning\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 9\n    }, this), showScoreAlert && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Your Final Score: \", score, \" out of \", data.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 228,\n    columnNumber: 5\n  }, this);\n};\n_s(Random, \"paORq7S6WkjP4h2o1fg8tXafHPQ=\");\n_c = Random;\nexport default Random;\nvar _c;\n$RefreshReg$(_c, \"Random\");","map":{"version":3,"names":["React","useEffect","useState","fetchData","Container","Button","jsxDEV","_jsxDEV","Random","_s","data","setData","userAnswers","setUserAnswers","currentQuestionIndex","setCurrentQuestionIndex","answerSelected","setAnswerSelected","score","setScore","showScoreAlert","setShowScoreAlert","showSubmitButton","setShowSubmitButton","getData","length","newScore","reduce","totalScore","answerIndex","questionIndex","isCorrect","answer","is_right","response","shuffledData","shuffleArray","array","map","question","answers","shuffleAnswers","shuffledAnswers","slice","i","j","Math","floor","random","handleAnswerClick","newAnswers","handleNextClick","handleScoreSubmit","children","htmlFor","title","fileName","_jsxFileName","lineNumber","columnNumber","className","action","variant","onClick","disabled","style","width","answer_text","id","_c","$RefreshReg$"],"sources":["E:/MCQ_Generator_Task/core/src/components/Random.jsx"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\r\n// import { fetchData } from \"../api\";\r\n// import Container from \"react-bootstrap/Container\";\r\n// import Button from \"react-bootstrap/Button\";\r\n\r\n// export const Random = () => {\r\n//   const [data, setData] = useState([]);\r\n//   const [userAnswers, setUserAnswers] = useState([]);\r\n//   const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n//   const [answerSelected, setAnswerSelected] = useState(false);\r\n//   const [score, setScore] = useState(0); // Track the user's score\r\n//   const [showScoreAlert, setShowScoreAlert] = useState(false); // Control when to show the score alert\r\n//   const [showSubmitButton, setShowSubmitButton] = useState(false); // Control when to show the \"Submit\" button\r\n\r\n//   useEffect(() => {\r\n//     getData();\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     if (answerSelected && currentQuestionIndex === data.length - 1) {\r\n//       // Calculate the score when all questions have been answered\r\n//       const newScore = userAnswers.reduce((totalScore, answerIndex, questionIndex) => {\r\n//         const isCorrect = data[questionIndex].answer[answerIndex].is_right;\r\n//         return isCorrect ? totalScore + 1 : totalScore;\r\n//       }, 0);\r\n//       setScore(newScore);\r\n//       setShowScoreAlert(true);\r\n//       setShowSubmitButton(false); // Hide the \"Submit\" button after showing the score\r\n//     }\r\n//   }, [userAnswers, currentQuestionIndex, answerSelected, data, score]);\r\n\r\n//   const getData = async () => {\r\n//     const response = await fetchData('mcq/q/django');\r\n//     const shuffledData = shuffleArray(response);\r\n//     setData(shuffledData);\r\n//   };\r\n\r\n//   const shuffleArray = (array) => {\r\n//     let shuffledArray = array.slice();\r\n//     for (let i = shuffledArray.length - 1; i > 0; i--) {\r\n//       const j = Math.floor(Math.random() * (i + 1));\r\n//       [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];\r\n//     }\r\n//     return shuffledArray;\r\n//   };\r\n\r\n//   const handleAnswerClick = (questionIndex, answerIndex) => {\r\n//     if (!answerSelected) {\r\n//       const newAnswers = [...userAnswers];\r\n//       newAnswers[questionIndex] = answerIndex;\r\n//       setUserAnswers(newAnswers);\r\n//       setAnswerSelected(true);\r\n\r\n//       if (questionIndex === data.length - 1) {\r\n//         // Show the \"Submit\" button when the last question is answered\r\n//         setShowSubmitButton(true);\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   const handleNextClick = () => {\r\n//     if (currentQuestionIndex < data.length - 1) {\r\n//       setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n//       setAnswerSelected(false);\r\n//     }\r\n//   };\r\n\r\n//   const handleScoreSubmit = () => {\r\n//     // Calculate the score when the user chooses to submit\r\n//     const newScore = userAnswers.reduce((totalScore, answerIndex, questionIndex) => {\r\n//       const isCorrect = data[questionIndex].answer[answerIndex].is_right;\r\n//       return isCorrect ? totalScore + 1 : totalScore;\r\n//     }, 0);\r\n//     setScore(newScore);\r\n//     setShowScoreAlert(true);\r\n//     setShowSubmitButton(false);\r\n//   };\r\n\r\n//   return (\r\n//     <Container>\r\n//       {data.length > 0 && currentQuestionIndex < data.length && (\r\n//         <div>\r\n//           <h3>\r\n//             <label htmlFor=\"\">{currentQuestionIndex + 1}) {data[currentQuestionIndex].title}</label>\r\n//           </h3>\r\n//           <ul className=\"answer-list\">\r\n//             {data[currentQuestionIndex].answer.map((answer, answerIndex) => (\r\n//               <div key={answer.id}>\r\n//                 <form action=\"\">\r\n//                   <br />\r\n//                   <div className=\"main\">\r\n//                     <Button \r\n//                       variant={\r\n//                         answerSelected &&\r\n//                         (answer.is_right || userAnswers[currentQuestionIndex] === answerIndex)\r\n//                           ? answer.is_right\r\n//                             ? \"success\"\r\n//                             : \"danger\"\r\n//                           : \"primary\"\r\n//                       }\r\n//                       onClick={() => handleAnswerClick(currentQuestionIndex, answerIndex)}\r\n//                       disabled={answerSelected || showScoreAlert}\r\n//                       className={answerSelected ? \"disabled-answer\" : \"\"}\r\n//                       style={{width:'20rem'}}\r\n//                     >\r\n//                       {answerIndex + 1}) {answer.answer_text}\r\n//                       {answer.is_right ? \"\" : \"\"}\r\n//                     </Button>\r\n//                   </div>\r\n//                 </form>\r\n//               </div>\r\n//             ))}\r\n//           </ul>\r\n//           {answerSelected && currentQuestionIndex < data.length - 1 && (\r\n//             <Button  onClick={handleNextClick} variant=\"primary\">\r\n//               Next\r\n//             </Button>\r\n//           )}\r\n//           {showSubmitButton && (\r\n//             <Button onClick={handleScoreSubmit} variant=\"warning\">\r\n//               Submit\r\n//             </Button>\r\n//           )}\r\n//         </div>\r\n//       )}\r\n//       {showScoreAlert && (\r\n//         <div>\r\n//           <h1>Your Final Score: {score} out of {data.length}</h1>\r\n//         </div>\r\n//       )}\r\n//     </Container>\r\n//   );\r\n// };\r\n\r\n// export default Random;\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { fetchData } from \"../api\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nexport const Random = () => {\r\n  const [data, setData] = useState([]);\r\n  const [userAnswers, setUserAnswers] = useState([]);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [answerSelected, setAnswerSelected] = useState(false);\r\n  const [score, setScore] = useState(0); // Track the user's score\r\n  const [showScoreAlert, setShowScoreAlert] = useState(false); // Control when to show the score alert\r\n  const [showSubmitButton, setShowSubmitButton] = useState(false); // Control when to show the \"Submit\" button\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (answerSelected && currentQuestionIndex === data.length - 1) {\r\n      // Calculate the score when all questions have been answered\r\n      const newScore = userAnswers.reduce((totalScore, answerIndex, questionIndex) => {\r\n        const isCorrect = data[questionIndex].answer[answerIndex].is_right;\r\n        return isCorrect ? totalScore + 1 : totalScore;\r\n      }, 0);\r\n      setScore(newScore);\r\n      setShowScoreAlert(true);\r\n      setShowSubmitButton(false); // Hide the \"Submit\" button after showing the score\r\n    }\r\n  }, [userAnswers, currentQuestionIndex, answerSelected, data, score]);\r\n\r\n  const getData = async () => {\r\n    const response = await fetchData('mcq/q/django');\r\n    const shuffledData = shuffleArray(response);\r\n    setData(shuffledData);\r\n  };\r\n\r\n  const shuffleArray = (array) => {\r\n    return array.map((question) => {\r\n      const answers = shuffleAnswers(question.answer);\r\n      return { ...question, answer: answers };\r\n    });\r\n  };\r\n  \r\n  const shuffleAnswers = (answers) => {\r\n    let shuffledAnswers = answers.slice();\r\n    for (let i = shuffledAnswers.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [shuffledAnswers[i], shuffledAnswers[j]] = [shuffledAnswers[j], shuffledAnswers[i]];\r\n    }\r\n    return shuffledAnswers;\r\n  };\r\n  \r\n\r\n  const handleAnswerClick = (questionIndex, answerIndex) => {\r\n    if (!answerSelected) {\r\n      const newAnswers = [...userAnswers];\r\n      newAnswers[questionIndex] = answerIndex;\r\n      setUserAnswers(newAnswers);\r\n      setAnswerSelected(true);\r\n\r\n      if (questionIndex === data.length - 1) {\r\n        // Show the \"Submit\" button when the last question is answered\r\n        setShowSubmitButton(true);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleNextClick = () => {\r\n    if (currentQuestionIndex < data.length - 1) {\r\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n      setAnswerSelected(false);\r\n    }\r\n  };\r\n\r\n  const handleScoreSubmit = () => {\r\n    // Calculate the score when the user chooses to submit\r\n    const newScore = userAnswers.reduce((totalScore, answerIndex, questionIndex) => {\r\n      const isCorrect = data[questionIndex].answer[answerIndex].is_right;\r\n      return isCorrect ? totalScore + 1 : totalScore;\r\n    }, 0);\r\n    setScore(newScore);\r\n    setShowScoreAlert(true);\r\n    setShowSubmitButton(false);\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      {data.length > 0 && currentQuestionIndex < data.length && (\r\n        <div>\r\n          <h3>\r\n            <label htmlFor=\"\">{currentQuestionIndex + 1}) {data[currentQuestionIndex].title}</label>\r\n          </h3>\r\n          <ul className=\"answer-list\">\r\n            {data[currentQuestionIndex].answer.map((answer, answerIndex) => (\r\n              <div key={answer.id}>\r\n                <form action=\"\">\r\n                  <br />\r\n                  <div className=\"main\">\r\n                    <Button \r\n                      variant={\r\n                        answerSelected &&\r\n                        (answer.is_right || userAnswers[currentQuestionIndex] === answerIndex)\r\n                          ? answer.is_right\r\n                            ? \"success\"\r\n                            : \"danger\"\r\n                          : \"primary\"\r\n                      }\r\n                      onClick={() => handleAnswerClick(currentQuestionIndex, answerIndex)}\r\n                      disabled={answerSelected || showScoreAlert}\r\n                      className={answerSelected ? \"disabled-answer\" : \"\"}\r\n                      style={{width:'20rem'}}\r\n                    >\r\n                      {answerIndex + 1}) {answer.answer_text}\r\n                      {answer.is_right ? \"\" : \"\"}\r\n                    </Button>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n            ))}\r\n          </ul>\r\n          {answerSelected && currentQuestionIndex < data.length - 1 && (\r\n            <Button  onClick={handleNextClick} variant=\"primary\">\r\n              Next\r\n            </Button>\r\n          )}\r\n          {showSubmitButton && (\r\n            <Button onClick={handleScoreSubmit} variant=\"warning\">\r\n              Submit\r\n            </Button>\r\n          )}\r\n        </div>\r\n      )}\r\n      {showScoreAlert && (\r\n        <div>\r\n          <h1>Your Final Score: {score} out of {data.length}</h1>\r\n        </div>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Random;"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAMA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,QAAQ;AAClC,OAAOC,SAAS,MAAM,2BAA2B;AACjD,OAAOC,MAAM,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,OAAO,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACU,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACY,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGb,QAAQ,CAAC,CAAC,CAAC;EACnE,MAAM,CAACc,cAAc,EAAEC,iBAAiB,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EAC3D,MAAM,CAACgB,KAAK,EAAEC,QAAQ,CAAC,GAAGjB,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,MAAM,CAACkB,cAAc,EAAEC,iBAAiB,CAAC,GAAGnB,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EAC7D,MAAM,CAACoB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGrB,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAEjED,SAAS,CAAC,MAAM;IACduB,OAAO,CAAC,CAAC;EACX,CAAC,EAAE,EAAE,CAAC;EAENvB,SAAS,CAAC,MAAM;IACd,IAAIe,cAAc,IAAIF,oBAAoB,KAAKJ,IAAI,CAACe,MAAM,GAAG,CAAC,EAAE;MAC9D;MACA,MAAMC,QAAQ,GAAGd,WAAW,CAACe,MAAM,CAAC,CAACC,UAAU,EAAEC,WAAW,EAAEC,aAAa,KAAK;QAC9E,MAAMC,SAAS,GAAGrB,IAAI,CAACoB,aAAa,CAAC,CAACE,MAAM,CAACH,WAAW,CAAC,CAACI,QAAQ;QAClE,OAAOF,SAAS,GAAGH,UAAU,GAAG,CAAC,GAAGA,UAAU;MAChD,CAAC,EAAE,CAAC,CAAC;MACLT,QAAQ,CAACO,QAAQ,CAAC;MAClBL,iBAAiB,CAAC,IAAI,CAAC;MACvBE,mBAAmB,CAAC,KAAK,CAAC,CAAC,CAAC;IAC9B;EACF,CAAC,EAAE,CAACX,WAAW,EAAEE,oBAAoB,EAAEE,cAAc,EAAEN,IAAI,EAAEQ,KAAK,CAAC,CAAC;EAEpE,MAAMM,OAAO,GAAG,MAAAA,CAAA,KAAY;IAC1B,MAAMU,QAAQ,GAAG,MAAM/B,SAAS,CAAC,cAAc,CAAC;IAChD,MAAMgC,YAAY,GAAGC,YAAY,CAACF,QAAQ,CAAC;IAC3CvB,OAAO,CAACwB,YAAY,CAAC;EACvB,CAAC;EAED,MAAMC,YAAY,GAAIC,KAAK,IAAK;IAC9B,OAAOA,KAAK,CAACC,GAAG,CAAEC,QAAQ,IAAK;MAC7B,MAAMC,OAAO,GAAGC,cAAc,CAACF,QAAQ,CAACP,MAAM,CAAC;MAC/C,OAAO;QAAE,GAAGO,QAAQ;QAAEP,MAAM,EAAEQ;MAAQ,CAAC;IACzC,CAAC,CAAC;EACJ,CAAC;EAED,MAAMC,cAAc,GAAID,OAAO,IAAK;IAClC,IAAIE,eAAe,GAAGF,OAAO,CAACG,KAAK,CAAC,CAAC;IACrC,KAAK,IAAIC,CAAC,GAAGF,eAAe,CAACjB,MAAM,GAAG,CAAC,EAAEmB,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MACnD,MAAMC,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,IAAIJ,CAAC,GAAG,CAAC,CAAC,CAAC;MAC7C,CAACF,eAAe,CAACE,CAAC,CAAC,EAAEF,eAAe,CAACG,CAAC,CAAC,CAAC,GAAG,CAACH,eAAe,CAACG,CAAC,CAAC,EAAEH,eAAe,CAACE,CAAC,CAAC,CAAC;IACrF;IACA,OAAOF,eAAe;EACxB,CAAC;EAGD,MAAMO,iBAAiB,GAAGA,CAACnB,aAAa,EAAED,WAAW,KAAK;IACxD,IAAI,CAACb,cAAc,EAAE;MACnB,MAAMkC,UAAU,GAAG,CAAC,GAAGtC,WAAW,CAAC;MACnCsC,UAAU,CAACpB,aAAa,CAAC,GAAGD,WAAW;MACvChB,cAAc,CAACqC,UAAU,CAAC;MAC1BjC,iBAAiB,CAAC,IAAI,CAAC;MAEvB,IAAIa,aAAa,KAAKpB,IAAI,CAACe,MAAM,GAAG,CAAC,EAAE;QACrC;QACAF,mBAAmB,CAAC,IAAI,CAAC;MAC3B;IACF;EACF,CAAC;EAED,MAAM4B,eAAe,GAAGA,CAAA,KAAM;IAC5B,IAAIrC,oBAAoB,GAAGJ,IAAI,CAACe,MAAM,GAAG,CAAC,EAAE;MAC1CV,uBAAuB,CAACD,oBAAoB,GAAG,CAAC,CAAC;MACjDG,iBAAiB,CAAC,KAAK,CAAC;IAC1B;EACF,CAAC;EAED,MAAMmC,iBAAiB,GAAGA,CAAA,KAAM;IAC9B;IACA,MAAM1B,QAAQ,GAAGd,WAAW,CAACe,MAAM,CAAC,CAACC,UAAU,EAAEC,WAAW,EAAEC,aAAa,KAAK;MAC9E,MAAMC,SAAS,GAAGrB,IAAI,CAACoB,aAAa,CAAC,CAACE,MAAM,CAACH,WAAW,CAAC,CAACI,QAAQ;MAClE,OAAOF,SAAS,GAAGH,UAAU,GAAG,CAAC,GAAGA,UAAU;IAChD,CAAC,EAAE,CAAC,CAAC;IACLT,QAAQ,CAACO,QAAQ,CAAC;IAClBL,iBAAiB,CAAC,IAAI,CAAC;IACvBE,mBAAmB,CAAC,KAAK,CAAC;EAC5B,CAAC;EAED,oBACEhB,OAAA,CAACH,SAAS;IAAAiD,QAAA,GACP3C,IAAI,CAACe,MAAM,GAAG,CAAC,IAAIX,oBAAoB,GAAGJ,IAAI,CAACe,MAAM,iBACpDlB,OAAA;MAAA8C,QAAA,gBACE9C,OAAA;QAAA8C,QAAA,eACE9C,OAAA;UAAO+C,OAAO,EAAC,EAAE;UAAAD,QAAA,GAAEvC,oBAAoB,GAAG,CAAC,EAAC,IAAE,EAACJ,IAAI,CAACI,oBAAoB,CAAC,CAACyC,KAAK;QAAA;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtF,CAAC,eACLpD,OAAA;QAAIqD,SAAS,EAAC,aAAa;QAAAP,QAAA,EACxB3C,IAAI,CAACI,oBAAoB,CAAC,CAACkB,MAAM,CAACM,GAAG,CAAC,CAACN,MAAM,EAAEH,WAAW,kBACzDtB,OAAA;UAAA8C,QAAA,eACE9C,OAAA;YAAMsD,MAAM,EAAC,EAAE;YAAAR,QAAA,gBACb9C,OAAA;cAAAiD,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eACNpD,OAAA;cAAKqD,SAAS,EAAC,MAAM;cAAAP,QAAA,eACnB9C,OAAA,CAACF,MAAM;gBACLyD,OAAO,EACL9C,cAAc,KACbgB,MAAM,CAACC,QAAQ,IAAIrB,WAAW,CAACE,oBAAoB,CAAC,KAAKe,WAAW,CAAC,GAClEG,MAAM,CAACC,QAAQ,GACb,SAAS,GACT,QAAQ,GACV,SACL;gBACD8B,OAAO,EAAEA,CAAA,KAAMd,iBAAiB,CAACnC,oBAAoB,EAAEe,WAAW,CAAE;gBACpEmC,QAAQ,EAAEhD,cAAc,IAAII,cAAe;gBAC3CwC,SAAS,EAAE5C,cAAc,GAAG,iBAAiB,GAAG,EAAG;gBACnDiD,KAAK,EAAE;kBAACC,KAAK,EAAC;gBAAO,CAAE;gBAAAb,QAAA,GAEtBxB,WAAW,GAAG,CAAC,EAAC,IAAE,EAACG,MAAM,CAACmC,WAAW,EACrCnC,MAAM,CAACC,QAAQ,GAAG,EAAE,GAAG,EAAE;cAAA;gBAAAuB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACpB;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACN,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACF;QAAC,GAtBC3B,MAAM,CAACoC,EAAE;UAAAZ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAuBd,CACN;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC,EACJ3C,cAAc,IAAIF,oBAAoB,GAAGJ,IAAI,CAACe,MAAM,GAAG,CAAC,iBACvDlB,OAAA,CAACF,MAAM;QAAE0D,OAAO,EAAEZ,eAAgB;QAACW,OAAO,EAAC,SAAS;QAAAT,QAAA,EAAC;MAErD;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CACT,EACArC,gBAAgB,iBACff,OAAA,CAACF,MAAM;QAAC0D,OAAO,EAAEX,iBAAkB;QAACU,OAAO,EAAC,SAAS;QAAAT,QAAA,EAAC;MAEtD;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CACT;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CACN,EACAvC,cAAc,iBACbb,OAAA;MAAA8C,QAAA,eACE9C,OAAA;QAAA8C,QAAA,GAAI,oBAAkB,EAACnC,KAAK,EAAC,UAAQ,EAACR,IAAI,CAACe,MAAM;MAAA;QAAA+B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpD,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACQ,CAAC;AAEhB,CAAC;AAAClD,EAAA,CAvIWD,MAAM;AAAA6D,EAAA,GAAN7D,MAAM;AAyInB,eAAeA,MAAM;AAAC,IAAA6D,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}