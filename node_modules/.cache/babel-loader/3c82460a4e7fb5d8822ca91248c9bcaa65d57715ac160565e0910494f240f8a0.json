{"ast":null,"code":"var _jsxFileName = \"D:\\\\MCQ Generator_Frontend\\\\core\\\\src\\\\components\\\\Random.jsx\",\n  _s = $RefreshSig$();\n// import { useEffect,useState } from \"react\";\n// import { fetchData } from \"../api\";\n// import Container from \"react-bootstrap/esm/Container\";\n// import Button from \"react-bootstrap/esm/Button\";\n\n// export const Random= ()=>{\n\n//     const [data, setData] = useState([])\n//     // const [title,answer] = data\n//      useEffect(() => {\n//        getData()\n//      }, [])\n//      const getData = async () => {\n//          const response = await fetchData('mcq/r/django')\n//          setData(response)\n//      }\n\n// return (\n// <>\n// <Container>\n// {data.map((question, index) => (\n//             <div key={index}>\n//               <h3><label htmlFor=\"\">{index+1}){question.title}</label></h3>\n//               <ul>\n//                 {question.answer.map((answer,index) => (\n//                   <div key={answer.id}>\n//                     <form action=\"\">\n//                         <br />\n//                 <div className=\"main\"><Button>{index+1}){answer.answer_text}{answer.is_right ? ' (Correct)' : ''}</Button></div> \n\n//                     </form>\n//                   </div>\n//                 ))}\n//               </ul>\n//             </div>\n//           ))}\n// </Container>\n\n// </>\n// )\n\n// }\n\n// export default Random;\n\n// import React, { useEffect, useState } from \"react\";\n// import { fetchData } from \"../api\";\n// import Container from \"react-bootstrap/Container\";\n// import Button from \"react-bootstrap/Button\";\n\n// export const Random = () => {\n//   const [data, setData] = useState([]);\n//   const [userAnswers, setUserAnswers] = useState([]); // To store the user's answers\n\n//   useEffect(() => {\n//     getData();\n//   }, []);\n\n//   const getData = async () => {\n//     const response = await fetchData('mcq/q/django');\n//     setData(response);\n//   };\n\n//   const handleAnswerClick = (questionIndex, answerIndex) => {\n//     // Create a copy of the userAnswers array\n//     const newAnswers = [...userAnswers];\n//     newAnswers[questionIndex] = answerIndex;\n//     setUserAnswers(newAnswers);\n//   };\n\n//   return (\n//     <Container>\n//       {data.map((question, questionIndex) => (\n//         <div key={questionIndex}>\n//           <h3>\n//             <label htmlFor=\"\">{questionIndex + 1}) {question.title}</label>\n//           </h3>\n//           <ul className=\"answer-list\">\n//             {question.answer.map((answer, answerIndex) => (\n//               <div key={answer.id}>\n//                 <form action=\"\">\n//                   <br />\n//                   <div className=\"main\">\n//                     <Button\n//                       variant={\n//                         userAnswers[questionIndex] === answerIndex\n//                           ? answer.is_right\n//                             ? \"success\"\n//                             : \"danger\"\n//                           : \"primary\"\n//                       }\n//                       onClick={() => handleAnswerClick(questionIndex, answerIndex)}\n//                     >\n//                       {answerIndex + 1}) {answer.answer_text}\n//                       {answer.is_right ? \" \" : \"\"}\n//                     </Button>\n//                   </div>\n//                 </form>\n//               </div>\n//             ))}\n//           </ul>\n//         </div>\n//       ))}\n//     </Container>\n//   );\n// };\n\n// export default Random;\n\nimport React, { useEffect, useState } from \"react\";\nimport { fetchData } from \"../api\";\nimport Container from \"react-bootstrap/Container\";\nimport Button from \"react-bootstrap/Button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Random = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const [userAnswers, setUserAnswers] = useState([]); // To store the user's answers\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); // To track the current question\n\n  useEffect(() => {\n    getData();\n  }, []);\n  const getData = async () => {\n    const response = await fetchData('mcq/q/django');\n    setData(response);\n  };\n  const handleAnswerClick = (questionIndex, answerIndex) => {\n    // Create a copy of the userAnswers array\n    const newAnswers = [...userAnswers];\n    newAnswers[questionIndex] = answerIndex;\n    setUserAnswers(newAnswers);\n  };\n  const handleNextClick = () => {\n    if (currentQuestionIndex < data.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: data.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"\",\n          children: [currentQuestionIndex + 1, \") \", data[currentQuestionIndex].title]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"answer-list\",\n        children: data[currentQuestionIndex].answer.map((answer, answerIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            action: \"\",\n            children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"main\",\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                variant: userAnswers[currentQuestionIndex] === answerIndex ? answer.is_right ? \"success\" : \"danger\" : \"primary\",\n                onClick: () => handleAnswerClick(currentQuestionIndex, answerIndex),\n                children: [answerIndex + 1, \") \", answer.answer_text, answer.is_right ? \" \" : \"\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 160,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 17\n          }, this)\n        }, answer.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 11\n      }, this), currentQuestionIndex < data.length - 1 && /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleNextClick,\n        variant: \"primary\",\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 5\n  }, this);\n};\n_s(Random, \"69OGAlV8VdoXQ70jPGS4Rh7Gw1w=\");\n_c = Random;\nexport default Random;\nvar _c;\n$RefreshReg$(_c, \"Random\");","map":{"version":3,"names":["React","useEffect","useState","fetchData","Container","Button","jsxDEV","_jsxDEV","Random","_s","data","setData","userAnswers","setUserAnswers","currentQuestionIndex","setCurrentQuestionIndex","getData","response","handleAnswerClick","questionIndex","answerIndex","newAnswers","handleNextClick","length","children","htmlFor","title","fileName","_jsxFileName","lineNumber","columnNumber","className","answer","map","action","variant","is_right","onClick","answer_text","id","_c","$RefreshReg$"],"sources":["D:/MCQ Generator_Frontend/core/src/components/Random.jsx"],"sourcesContent":["// import { useEffect,useState } from \"react\";\r\n// import { fetchData } from \"../api\";\r\n// import Container from \"react-bootstrap/esm/Container\";\r\n// import Button from \"react-bootstrap/esm/Button\";\r\n\r\n\r\n// export const Random= ()=>{\r\n\r\n//     const [data, setData] = useState([])\r\n//     // const [title,answer] = data\r\n//      useEffect(() => {\r\n//        getData()\r\n//      }, [])\r\n//      const getData = async () => {\r\n//          const response = await fetchData('mcq/r/django')\r\n//          setData(response)\r\n//      }\r\n\r\n// return (\r\n// <>\r\n// <Container>\r\n// {data.map((question, index) => (\r\n//             <div key={index}>\r\n//               <h3><label htmlFor=\"\">{index+1}){question.title}</label></h3>\r\n//               <ul>\r\n//                 {question.answer.map((answer,index) => (\r\n//                   <div key={answer.id}>\r\n//                     <form action=\"\">\r\n//                         <br />\r\n//                 <div className=\"main\"><Button>{index+1}){answer.answer_text}{answer.is_right ? ' (Correct)' : ''}</Button></div> \r\n                   \r\n//                     </form>\r\n//                   </div>\r\n//                 ))}\r\n//               </ul>\r\n//             </div>\r\n//           ))}\r\n// </Container>\r\n\r\n// </>\r\n// )\r\n\r\n\r\n// }\r\n\r\n// export default Random;\r\n\r\n\r\n\r\n// import React, { useEffect, useState } from \"react\";\r\n// import { fetchData } from \"../api\";\r\n// import Container from \"react-bootstrap/Container\";\r\n// import Button from \"react-bootstrap/Button\";\r\n\r\n// export const Random = () => {\r\n//   const [data, setData] = useState([]);\r\n//   const [userAnswers, setUserAnswers] = useState([]); // To store the user's answers\r\n\r\n//   useEffect(() => {\r\n//     getData();\r\n//   }, []);\r\n\r\n//   const getData = async () => {\r\n//     const response = await fetchData('mcq/q/django');\r\n//     setData(response);\r\n//   };\r\n\r\n//   const handleAnswerClick = (questionIndex, answerIndex) => {\r\n//     // Create a copy of the userAnswers array\r\n//     const newAnswers = [...userAnswers];\r\n//     newAnswers[questionIndex] = answerIndex;\r\n//     setUserAnswers(newAnswers);\r\n//   };\r\n\r\n//   return (\r\n//     <Container>\r\n//       {data.map((question, questionIndex) => (\r\n//         <div key={questionIndex}>\r\n//           <h3>\r\n//             <label htmlFor=\"\">{questionIndex + 1}) {question.title}</label>\r\n//           </h3>\r\n//           <ul className=\"answer-list\">\r\n//             {question.answer.map((answer, answerIndex) => (\r\n//               <div key={answer.id}>\r\n//                 <form action=\"\">\r\n//                   <br />\r\n//                   <div className=\"main\">\r\n//                     <Button\r\n//                       variant={\r\n//                         userAnswers[questionIndex] === answerIndex\r\n//                           ? answer.is_right\r\n//                             ? \"success\"\r\n//                             : \"danger\"\r\n//                           : \"primary\"\r\n//                       }\r\n//                       onClick={() => handleAnswerClick(questionIndex, answerIndex)}\r\n//                     >\r\n//                       {answerIndex + 1}) {answer.answer_text}\r\n//                       {answer.is_right ? \" \" : \"\"}\r\n//                     </Button>\r\n//                   </div>\r\n//                 </form>\r\n//               </div>\r\n//             ))}\r\n//           </ul>\r\n//         </div>\r\n//       ))}\r\n//     </Container>\r\n//   );\r\n// };\r\n\r\n// export default Random;\r\n\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { fetchData } from \"../api\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nexport const Random = () => {\r\n  const [data, setData] = useState([]);\r\n  const [userAnswers, setUserAnswers] = useState([]); // To store the user's answers\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); // To track the current question\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  const getData = async () => {\r\n    const response = await fetchData('mcq/q/django');\r\n    setData(response);\r\n  };\r\n\r\n  const handleAnswerClick = (questionIndex, answerIndex) => {\r\n    // Create a copy of the userAnswers array\r\n    const newAnswers = [...userAnswers];\r\n    newAnswers[questionIndex] = answerIndex;\r\n    setUserAnswers(newAnswers);\r\n  };\r\n\r\n  const handleNextClick = () => {\r\n    if (currentQuestionIndex < data.length - 1) {\r\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      {data.length > 0 && (\r\n        <div>\r\n          <h3>\r\n            <label htmlFor=\"\">{currentQuestionIndex + 1}) {data[currentQuestionIndex].title}</label>\r\n          </h3>\r\n          <ul className=\"answer-list\">\r\n            {data[currentQuestionIndex].answer.map((answer, answerIndex) => (\r\n              <div key={answer.id}>\r\n                <form action=\"\">\r\n                  <br />\r\n                  <div className=\"main\">\r\n                    <Button\r\n                      variant={\r\n                        userAnswers[currentQuestionIndex] === answerIndex\r\n                          ? answer.is_right\r\n                            ? \"success\"\r\n                            : \"danger\"\r\n                          : \"primary\"\r\n                      }\r\n                      onClick={() => handleAnswerClick(currentQuestionIndex, answerIndex)}\r\n                    >\r\n                      {answerIndex + 1}) {answer.answer_text}\r\n                      {answer.is_right ? \" \" : \"\"}\r\n                    </Button>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n            ))}\r\n          </ul>\r\n          {currentQuestionIndex < data.length - 1 && (\r\n            <Button onClick={handleNextClick} variant=\"primary\">\r\n              Next\r\n            </Button>\r\n          )}\r\n        </div>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Random;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}