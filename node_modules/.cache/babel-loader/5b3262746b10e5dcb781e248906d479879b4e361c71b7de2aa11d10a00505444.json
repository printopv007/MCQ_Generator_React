{"ast":null,"code":"var _jsxFileName = \"D:\\\\MCQ Generator_Frontend\\\\core\\\\src\\\\components\\\\Cards.jsx\",\n  _s = $RefreshSig$();\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BasicExample() {\n  _s();\n  const [data, setData] = useState([]);\n  const [title, answer] = data;\n  useEffect(() => {\n    getData();\n  }, []);\n  const getData = async () => {\n    const response = await fetchData();\n    setData(response);\n  };\n  return /*#__PURE__*/_jsxDEV(Card, {\n    style: {\n      width: '18rem'\n    },\n    children: [dat, /*#__PURE__*/_jsxDEV(Card.Img, {\n      variant: \"top\",\n      src: \"holder.js/100px180\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n      children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n        children: \"Card Title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n        children: \"Some quick example text to build on the card title and make up the bulk of the card's content.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"primary\",\n        children: \"Go somewhere\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n}\n\n//{data.map((question, index) => (\n//         <div key={index}>\n//           <h3>{question.title}</h3>\n//           <ul>\n//             {/* {question.answer.map((answer) => (\n//               <li key={answer.id}>\n//                 {answer.answer_text}\n//                 {answer.is_right ? ' (Correct)' : ''}\n//               </li>\n//             ))} */}\n//           </ul>\n//         </div>\n//       ))}\n_s(BasicExample, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n_c = BasicExample;\nexport default BasicExample;\nvar _c;\n$RefreshReg$(_c, \"BasicExample\");","map":{"version":3,"names":["Button","Card","jsxDEV","_jsxDEV","BasicExample","_s","data","setData","useState","title","answer","useEffect","getData","response","fetchData","style","width","children","dat","Img","variant","src","fileName","_jsxFileName","lineNumber","columnNumber","Body","Title","Text","_c","$RefreshReg$"],"sources":["D:/MCQ Generator_Frontend/core/src/components/Cards.jsx"],"sourcesContent":["import Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\n\r\nfunction BasicExample() {\r\n    const [data, setData] = useState([])\r\n      const [title,answer] = data\r\n      useEffect(() => {\r\n        getData()\r\n      }, [])\r\n      const getData = async () => {\r\n          const response = await fetchData()\r\n          setData(response)\r\n      }\r\n  return (\r\n    <Card style={{ width: '18rem' }}>\r\n        {dat}\r\n      <Card.Img variant=\"top\" src=\"holder.js/100px180\" />\r\n      <Card.Body>\r\n        <Card.Title>Card Title</Card.Title>\r\n        <Card.Text>\r\n          Some quick example text to build on the card title and make up the\r\n          bulk of the card's content.\r\n        </Card.Text>\r\n        <Button variant=\"primary\">Go somewhere</Button>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n}\r\n\r\n\r\n//{data.map((question, index) => (\r\n    //         <div key={index}>\r\n    //           <h3>{question.title}</h3>\r\n    //           <ul>\r\n    //             {/* {question.answer.map((answer) => (\r\n    //               <li key={answer.id}>\r\n    //                 {answer.answer_text}\r\n    //                 {answer.is_right ? ' (Correct)' : ''}\r\n    //               </li>\r\n    //             ))} */}\r\n    //           </ul>\r\n    //         </div>\r\n    //       ))}\r\n\r\nexport default BasicExample;\r\n\r\n"],"mappings":";;AAAA,OAAOA,MAAM,MAAM,wBAAwB;AAC3C,OAAOC,IAAI,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,YAAYA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGC,QAAQ,CAAC,EAAE,CAAC;EAClC,MAAM,CAACC,KAAK,EAACC,MAAM,CAAC,GAAGJ,IAAI;EAC3BK,SAAS,CAAC,MAAM;IACdC,OAAO,CAAC,CAAC;EACX,CAAC,EAAE,EAAE,CAAC;EACN,MAAMA,OAAO,GAAG,MAAAA,CAAA,KAAY;IACxB,MAAMC,QAAQ,GAAG,MAAMC,SAAS,CAAC,CAAC;IAClCP,OAAO,CAACM,QAAQ,CAAC;EACrB,CAAC;EACL,oBACEV,OAAA,CAACF,IAAI;IAACc,KAAK,EAAE;MAAEC,KAAK,EAAE;IAAQ,CAAE;IAAAC,QAAA,GAC3BC,GAAG,eACNf,OAAA,CAACF,IAAI,CAACkB,GAAG;MAACC,OAAO,EAAC,KAAK;MAACC,GAAG,EAAC;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACnDtB,OAAA,CAACF,IAAI,CAACyB,IAAI;MAAAT,QAAA,gBACRd,OAAA,CAACF,IAAI,CAAC0B,KAAK;QAAAV,QAAA,EAAC;MAAU;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAAC,eACnCtB,OAAA,CAACF,IAAI,CAAC2B,IAAI;QAAAX,QAAA,EAAC;MAGX;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAW,CAAC,eACZtB,OAAA,CAACH,MAAM;QAACoB,OAAO,EAAC,SAAS;QAAAH,QAAA,EAAC;MAAY;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACR,CAAC;AAEX;;AAGA;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAApB,EAAA,CAvCKD,YAAY;AAAAyB,EAAA,GAAZzB,YAAY;AAyCrB,eAAeA,YAAY;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}