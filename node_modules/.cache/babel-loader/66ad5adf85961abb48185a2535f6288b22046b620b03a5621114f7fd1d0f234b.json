{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport axios from 'axios';\nconst CollectData = url => {\n  _s();\n  const [isFetching, setFetching] = useState(false);\n  const [dataState, setDataState] = useState({\n    data: []\n  });\n  //const apiUrl = url; // No need to use useState for the API URL\n  // const apiUrl ='http://127.0.0.1:8000/mcq/'\n  useEffect(() => {\n    console.log(\"Mounting or Re-rendering...\");\n    const fetchDataFromApi = async () => {\n      try {\n        setFetching(true); // Update isFetching state to true\n\n        const response = await axios.get('http://127.0.0.1:8000/mcq/');\n        setDataState({\n          data: response.data\n        }); // Update dataState with the response data\n\n        setFetching(false); // Set isFetching back to false when done fetching\n      } catch (e) {\n        console.log(e);\n        setFetching(false); // Make sure to set isFetching to false in case of an error\n      }\n    };\n\n    fetchDataFromApi();\n  }, ['apiUrl']); // Include apiUrl in the dependency array to re-fetch when it changes\n\n  return [dataState, isFetching]; // Return isFetching state as well for better control\n};\n_s(CollectData, \"x3ThyoRth91f8AWHWbhEjVUEI58=\");\n_c = CollectData;\nexport default CollectData;\nvar _c;\n$RefreshReg$(_c, \"CollectData\");","map":{"version":3,"names":["useEffect","useState","axios","CollectData","url","_s","isFetching","setFetching","dataState","setDataState","data","console","log","fetchDataFromApi","response","get","e","_c","$RefreshReg$"],"sources":["D:/MCQ Generator_Frontend/core/src/api/ConnectAPI.jsx"],"sourcesContent":["import  { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst CollectData = (url) => {\r\n    const [isFetching, setFetching] = useState(false);\r\n    const [dataState, setDataState] = useState({ data: [] });\r\n    //const apiUrl = url; // No need to use useState for the API URL\r\n// const apiUrl ='http://127.0.0.1:8000/mcq/'\r\n    useEffect(() => {\r\n        console.log(\"Mounting or Re-rendering...\");\r\n        const fetchDataFromApi = async () => {\r\n            try {\r\n                setFetching(true); // Update isFetching state to true\r\n\r\n                const response = await axios.get('http://127.0.0.1:8000/mcq/');\r\n\r\n                setDataState({ data: response.data }); // Update dataState with the response data\r\n                \r\n                setFetching(false); // Set isFetching back to false when done fetching\r\n            } catch (e) {\r\n                console.log(e);\r\n                setFetching(false); // Make sure to set isFetching to false in case of an error\r\n            }\r\n        };\r\n\r\n        fetchDataFromApi();\r\n    }, ['apiUrl']); // Include apiUrl in the dependency array to re-fetch when it changes\r\n\r\n    return [dataState, isFetching]; // Return isFetching state as well for better control\r\n}\r\n\r\nexport default CollectData;\r\n"],"mappings":";AAAA,SAAUA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC5C,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,WAAW,GAAIC,GAAG,IAAK;EAAAC,EAAA;EACzB,MAAM,CAACC,UAAU,EAAEC,WAAW,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACO,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC;IAAES,IAAI,EAAE;EAAG,CAAC,CAAC;EACxD;EACJ;EACIV,SAAS,CAAC,MAAM;IACZW,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;IAC1C,MAAMC,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI;QACAN,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;;QAEnB,MAAMO,QAAQ,GAAG,MAAMZ,KAAK,CAACa,GAAG,CAAC,4BAA4B,CAAC;QAE9DN,YAAY,CAAC;UAAEC,IAAI,EAAEI,QAAQ,CAACJ;QAAK,CAAC,CAAC,CAAC,CAAC;;QAEvCH,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;MACxB,CAAC,CAAC,OAAOS,CAAC,EAAE;QACRL,OAAO,CAACC,GAAG,CAACI,CAAC,CAAC;QACdT,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;MACxB;IACJ,CAAC;;IAEDM,gBAAgB,CAAC,CAAC;EACtB,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAEhB,OAAO,CAACL,SAAS,EAAEF,UAAU,CAAC,CAAC,CAAC;AACpC,CAAC;AAAAD,EAAA,CA1BKF,WAAW;AAAAc,EAAA,GAAXd,WAAW;AA4BjB,eAAeA,WAAW;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}